
Labella_f303k8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003218  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080033d0  080033d0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033d0  080033d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033d4  080033d4  000133d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080033d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000088  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000098  20000098  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009d4d  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c70  00000000  00000000  00029dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a40  00000000  00000000  0002ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007d0  00000000  00000000  0002c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a6c1  00000000  00000000  0002cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d4ca  00000000  00000000  00047311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009c5bd  00000000  00000000  000547db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000028dc  00000000  00000000  000f0d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000f3674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003388 	.word	0x08003388

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003388 	.word	0x08003388

080001c8 <button_read_debounce>:
int time_duration = 5;

Button_TypeDef button;

uint8_t button_read_debounce(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - button.debounceTick > DEFAULT_DEBOUNCE_TIMEOUT_MS)
 80001cc:	f000 fb9e 	bl	800090c <HAL_GetTick>
 80001d0:	4602      	mov	r2, r0
 80001d2:	4b3b      	ldr	r3, [pc, #236]	; (80002c0 <button_read_debounce+0xf8>)
 80001d4:	68db      	ldr	r3, [r3, #12]
 80001d6:	1ad3      	subs	r3, r2, r3
 80001d8:	2b32      	cmp	r3, #50	; 0x32
 80001da:	d96e      	bls.n	80002ba <button_read_debounce+0xf2>
	{
		button.debounceTick = HAL_GetTick();
 80001dc:	f000 fb96 	bl	800090c <HAL_GetTick>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4a37      	ldr	r2, [pc, #220]	; (80002c0 <button_read_debounce+0xf8>)
 80001e4:	60d3      	str	r3, [r2, #12]
		button.state = HAL_GPIO_ReadPin(button.port, button.pin);
 80001e6:	4b36      	ldr	r3, [pc, #216]	; (80002c0 <button_read_debounce+0xf8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a35      	ldr	r2, [pc, #212]	; (80002c0 <button_read_debounce+0xf8>)
 80001ec:	8892      	ldrh	r2, [r2, #4]
 80001ee:	4611      	mov	r1, r2
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fe13 	bl	8000e1c <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b31      	ldr	r3, [pc, #196]	; (80002c0 <button_read_debounce+0xf8>)
 80001fc:	761a      	strb	r2, [r3, #24]
		if( button.state == GPIO_PIN_SET)
 80001fe:	4b30      	ldr	r3, [pc, #192]	; (80002c0 <button_read_debounce+0xf8>)
 8000200:	7e1b      	ldrb	r3, [r3, #24]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d104      	bne.n	8000210 <button_read_debounce+0x48>
		{
			//Pressed
			//HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_SET);
			button.pressedTick = HAL_GetTick();
 8000206:	f000 fb81 	bl	800090c <HAL_GetTick>
 800020a:	4603      	mov	r3, r0
 800020c:	4a2c      	ldr	r2, [pc, #176]	; (80002c0 <button_read_debounce+0xf8>)
 800020e:	6113      	str	r3, [r2, #16]
		}
		if(HAL_GPIO_ReadPin(button.port, button.pin) == GPIO_PIN_RESET)
 8000210:	4b2b      	ldr	r3, [pc, #172]	; (80002c0 <button_read_debounce+0xf8>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2a      	ldr	r2, [pc, #168]	; (80002c0 <button_read_debounce+0xf8>)
 8000216:	8892      	ldrh	r2, [r2, #4]
 8000218:	4611      	mov	r1, r2
 800021a:	4618      	mov	r0, r3
 800021c:	f000 fdfe 	bl	8000e1c <HAL_GPIO_ReadPin>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d149      	bne.n	80002ba <button_read_debounce+0xf2>
		{
			//Released
			//HAL_GPIO_WritePin(DBG_LED_GPIO_Port, DBG_LED_Pin, GPIO_PIN_RESET);
			button.releasedTick = HAL_GetTick();
 8000226:	f000 fb71 	bl	800090c <HAL_GetTick>
 800022a:	4603      	mov	r3, r0
 800022c:	4a24      	ldr	r2, [pc, #144]	; (80002c0 <button_read_debounce+0xf8>)
 800022e:	6153      	str	r3, [r2, #20]
			if(button.releasedTick > button.pressedTick)
 8000230:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <button_read_debounce+0xf8>)
 8000232:	695a      	ldr	r2, [r3, #20]
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <button_read_debounce+0xf8>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	429a      	cmp	r2, r3
 800023a:	d907      	bls.n	800024c <button_read_debounce+0x84>
			{
				button.pressedTime = button.releasedTick - button.pressedTick;
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <button_read_debounce+0xf8>)
 800023e:	695a      	ldr	r2, [r3, #20]
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <button_read_debounce+0xf8>)
 8000242:	691b      	ldr	r3, [r3, #16]
 8000244:	1ad3      	subs	r3, r2, r3
 8000246:	4a1e      	ldr	r2, [pc, #120]	; (80002c0 <button_read_debounce+0xf8>)
 8000248:	6093      	str	r3, [r2, #8]
 800024a:	e012      	b.n	8000272 <button_read_debounce+0xaa>
			}
			else if(button.releasedTick < button.pressedTick)
 800024c:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <button_read_debounce+0xf8>)
 800024e:	695a      	ldr	r2, [r3, #20]
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <button_read_debounce+0xf8>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	429a      	cmp	r2, r3
 8000256:	d209      	bcs.n	800026c <button_read_debounce+0xa4>
			{
				button.pressedTime = ((0xFFFFFFFF - button.releasedTick) - button.pressedTick) + 1;
 8000258:	4b19      	ldr	r3, [pc, #100]	; (80002c0 <button_read_debounce+0xf8>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	43da      	mvns	r2, r3
 800025e:	4b18      	ldr	r3, [pc, #96]	; (80002c0 <button_read_debounce+0xf8>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	1ad3      	subs	r3, r2, r3
 8000264:	3301      	adds	r3, #1
 8000266:	4a16      	ldr	r2, [pc, #88]	; (80002c0 <button_read_debounce+0xf8>)
 8000268:	6093      	str	r3, [r2, #8]
 800026a:	e002      	b.n	8000272 <button_read_debounce+0xaa>
			}
			else
			{
				button.pressedTime = 0;
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <button_read_debounce+0xf8>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]
			}

			if(button.pressedTime > DEFAULT_LONG_HOLD_TIMEOUT)
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <button_read_debounce+0xf8>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800027a:	4293      	cmp	r3, r2
 800027c:	d906      	bls.n	800028c <button_read_debounce+0xc4>
			{
				button.event = LONG_CLICK;
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <button_read_debounce+0xf8>)
 8000280:	2203      	movs	r2, #3
 8000282:	76da      	strb	r2, [r3, #27]
				button.hasPendingAction = true;
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <button_read_debounce+0xf8>)
 8000286:	2201      	movs	r2, #1
 8000288:	769a      	strb	r2, [r3, #26]
 800028a:	e016      	b.n	80002ba <button_read_debounce+0xf2>
			}
			else if(button.pressedTime > DEFAULT_HOLD_TIMEOUT_MS)
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <button_read_debounce+0xf8>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000294:	4293      	cmp	r3, r2
 8000296:	d906      	bls.n	80002a6 <button_read_debounce+0xde>
			{
				button.event = PRESSED;
 8000298:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <button_read_debounce+0xf8>)
 800029a:	2201      	movs	r2, #1
 800029c:	76da      	strb	r2, [r3, #27]
				button.hasPendingAction = true;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <button_read_debounce+0xf8>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	769a      	strb	r2, [r3, #26]
 80002a4:	e009      	b.n	80002ba <button_read_debounce+0xf2>

			}
			else if(button.pressedTime > DEFAULT_CLICK_TIMEOUT_MS)
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <button_read_debounce+0xf8>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	2b96      	cmp	r3, #150	; 0x96
 80002ac:	d905      	bls.n	80002ba <button_read_debounce+0xf2>
			{
				button.event = RELEASED;
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <button_read_debounce+0xf8>)
 80002b0:	2202      	movs	r2, #2
 80002b2:	76da      	strb	r2, [r3, #27]
				button.hasPendingAction = true;
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <button_read_debounce+0xf8>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	769a      	strb	r2, [r3, #26]
			}
		}

	}
}
 80002ba:	bf00      	nop
 80002bc:	4618      	mov	r0, r3
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	2000002c 	.word	0x2000002c

080002c4 <button_handler>:

void button_handler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
	BUTTON_EVENT_ENUM_t event = button_read_debounce();
 80002ca:	f7ff ff7d 	bl	80001c8 <button_read_debounce>
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
	//uint32_t current_time_handler = HAL_GetTick();
	//uint32_t last_action_time = 0;
	//uint32_t elapsed_time = current_time_handler - last_action_time;

	switch (event) {
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	d026      	beq.n	8000326 <button_handler+0x62>
 80002d8:	2b03      	cmp	r3, #3
 80002da:	dc31      	bgt.n	8000340 <button_handler+0x7c>
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d002      	beq.n	80002e6 <button_handler+0x22>
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	d00e      	beq.n	8000302 <button_handler+0x3e>
		pump_off();
		motorRight_off();
		motorLeft_off();*/

	default:
		break;
 80002e4:	e02c      	b.n	8000340 <button_handler+0x7c>
		motorRight_on();
 80002e6:	f000 f9ad 	bl	8000644 <motorRight_on>
		HAL_Delay(time_duration * 1000);
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <button_handler+0x88>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002f2:	fb02 f303 	mul.w	r3, r2, r3
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fb14 	bl	8000924 <HAL_Delay>
		motorRight_off();
 80002fc:	f000 f9ac 	bl	8000658 <motorRight_off>
		break;
 8000300:	e01f      	b.n	8000342 <button_handler+0x7e>
		led_on();
 8000302:	f000 f825 	bl	8000350 <led_on>
		pump_on();
 8000306:	f000 f9b1 	bl	800066c <pump_on>
		HAL_Delay(time_duration * 1000);
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <button_handler+0x88>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000312:	fb02 f303 	mul.w	r3, r2, r3
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fb04 	bl	8000924 <HAL_Delay>
		led_off();
 800031c:	f000 f822 	bl	8000364 <led_off>
		pump_off();
 8000320:	f000 f9ae 	bl	8000680 <pump_off>
		break;
 8000324:	e00d      	b.n	8000342 <button_handler+0x7e>
		led_on();
 8000326:	f000 f813 	bl	8000350 <led_on>
		HAL_Delay(time_duration * 1000);
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <button_handler+0x88>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000332:	fb02 f303 	mul.w	r3, r2, r3
 8000336:	4618      	mov	r0, r3
 8000338:	f000 faf4 	bl	8000924 <HAL_Delay>
		led_off();
 800033c:	f000 f812 	bl	8000364 <led_off>
		break;
 8000340:	bf00      	nop
	}
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000000 	.word	0x20000000

08000350 <led_on>:
 */
#include "main.h"
#include "led.h"

void led_on(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2140      	movs	r1, #64	; 0x40
 8000358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800035c:	f000 fd76 	bl	8000e4c <HAL_GPIO_WritePin>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}

08000364 <led_off>:

void led_off(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2140      	movs	r1, #64	; 0x40
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f000 fd6c 	bl	8000e4c <HAL_GPIO_WritePin>
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037c:	f000 fa6c 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000380:	f000 f807 	bl	8000392 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000384:	f000 f8fa 	bl	800057c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000388:	f000 f85c 	bl	8000444 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		button_handler();
 800038c:	f7ff ff9a 	bl	80002c4 <button_handler>
 8000390:	e7fc      	b.n	800038c <main+0x14>

08000392 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b096      	sub	sp, #88	; 0x58
 8000396:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800039c:	2228      	movs	r2, #40	; 0x28
 800039e:	2100      	movs	r1, #0
 80003a0:	4618      	mov	r0, r3
 80003a2:	f002 ffc5 	bl	8003330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a6:	f107 031c 	add.w	r3, r7, #28
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c6:	2302      	movs	r3, #2
 80003c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ce:	2310      	movs	r3, #16
 80003d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d2:	2302      	movs	r3, #2
 80003d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003d6:	2300      	movs	r3, #0
 80003d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80003da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80003de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fd49 	bl	8000e7c <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003f0:	f000 f922 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	230f      	movs	r3, #15
 80003f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2302      	movs	r3, #2
 80003fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000404:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2100      	movs	r1, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f001 fd71 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800041c:	f000 f90c 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000424:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f001 ff49 	bl	80022c4 <HAL_RCCEx_PeriphCLKConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000438:	f000 f8fe 	bl	8000638 <Error_Handler>
  }
}
 800043c:	bf00      	nop
 800043e:	3758      	adds	r7, #88	; 0x58
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}

08000444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b096      	sub	sp, #88	; 0x58
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	222c      	movs	r2, #44	; 0x2c
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f002 ff5d 	bl	8003330 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000476:	4b3f      	ldr	r3, [pc, #252]	; (8000574 <MX_TIM1_Init+0x130>)
 8000478:	4a3f      	ldr	r2, [pc, #252]	; (8000578 <MX_TIM1_Init+0x134>)
 800047a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8;
 800047c:	4b3d      	ldr	r3, [pc, #244]	; (8000574 <MX_TIM1_Init+0x130>)
 800047e:	2208      	movs	r2, #8
 8000480:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000482:	4b3c      	ldr	r3, [pc, #240]	; (8000574 <MX_TIM1_Init+0x130>)
 8000484:	2200      	movs	r2, #0
 8000486:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000488:	4b3a      	ldr	r3, [pc, #232]	; (8000574 <MX_TIM1_Init+0x130>)
 800048a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800048e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000490:	4b38      	ldr	r3, [pc, #224]	; (8000574 <MX_TIM1_Init+0x130>)
 8000492:	2200      	movs	r2, #0
 8000494:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <MX_TIM1_Init+0x130>)
 8000498:	2200      	movs	r2, #0
 800049a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800049c:	4b35      	ldr	r3, [pc, #212]	; (8000574 <MX_TIM1_Init+0x130>)
 800049e:	2200      	movs	r2, #0
 80004a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004a2:	4834      	ldr	r0, [pc, #208]	; (8000574 <MX_TIM1_Init+0x130>)
 80004a4:	f002 f834 	bl	8002510 <HAL_TIM_PWM_Init>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80004ae:	f000 f8c3 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b2:	2300      	movs	r3, #0
 80004b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004b6:	2300      	movs	r3, #0
 80004b8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004c2:	4619      	mov	r1, r3
 80004c4:	482b      	ldr	r0, [pc, #172]	; (8000574 <MX_TIM1_Init+0x130>)
 80004c6:	f002 fe4d 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80004d0:	f000 f8b2 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d4:	2360      	movs	r3, #96	; 0x60
 80004d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80004d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80004de:	2302      	movs	r3, #2
 80004e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004e2:	2300      	movs	r3, #0
 80004e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004ea:	2300      	movs	r3, #0
 80004ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	481e      	ldr	r0, [pc, #120]	; (8000574 <MX_TIM1_Init+0x130>)
 80004fc:	f002 f9da 	bl	80028b4 <HAL_TIM_PWM_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000506:	f000 f897 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800050a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050e:	2204      	movs	r2, #4
 8000510:	4619      	mov	r1, r3
 8000512:	4818      	ldr	r0, [pc, #96]	; (8000574 <MX_TIM1_Init+0x130>)
 8000514:	f002 f9ce 	bl	80028b4 <HAL_TIM_PWM_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800051e:	f000 f88b 	bl	8000638 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000522:	2300      	movs	r3, #0
 8000524:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000536:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800053a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000540:	2300      	movs	r3, #0
 8000542:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000548:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	4619      	mov	r1, r3
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <MX_TIM1_Init+0x130>)
 8000558:	f002 fe72 	bl	8003240 <HAL_TIMEx_ConfigBreakDeadTime>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000562:	f000 f869 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000566:	4803      	ldr	r0, [pc, #12]	; (8000574 <MX_TIM1_Init+0x130>)
 8000568:	f000 f8d8 	bl	800071c <HAL_TIM_MspPostInit>

}
 800056c:	bf00      	nop
 800056e:	3758      	adds	r7, #88	; 0x58
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000048 	.word	0x20000048
 8000578:	40012c00 	.word	0x40012c00

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MX_GPIO_Init+0xb4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a26      	ldr	r2, [pc, #152]	; (8000630 <MX_GPIO_Init+0xb4>)
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_GPIO_Init+0xb4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_GPIO_Init+0xb4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <MX_GPIO_Init+0xb4>)
 80005b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_GPIO_Init+0xb4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PUMP_Pin|LED_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2150      	movs	r1, #80	; 0x50
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f000 fc3f 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80005ce:	2301      	movs	r3, #1
 80005d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	4619      	mov	r1, r3
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f000 faa8 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUMP_Pin LED_Pin */
  GPIO_InitStruct.Pin = PUMP_Pin|LED_Pin;
 80005e8:	2350      	movs	r3, #80	; 0x50
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f000 fa99 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000606:	23c0      	movs	r3, #192	; 0xc0
 8000608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000616:	2307      	movs	r3, #7
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_GPIO_Init+0xb8>)
 8000622:	f000 fa89 	bl	8000b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	48000400 	.word	0x48000400

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <motorRight_on>:
extern TIM_HandleTypeDef htim1;
uint32_t maxduty = 0;
uint32_t duty = 0;

void motorRight_on(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000648:	2100      	movs	r1, #0
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <motorRight_on+0x10>)
 800064c:	f001 ffb8 	bl	80025c0 <HAL_TIM_PWM_Start>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000048 	.word	0x20000048

08000658 <motorRight_off>:

void motorRight_off(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	4802      	ldr	r0, [pc, #8]	; (8000668 <motorRight_off+0x10>)
 8000660:	f002 f89a 	bl	8002798 <HAL_TIM_PWM_Stop>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000048 	.word	0x20000048

0800066c <pump_on>:
 */
#include "main.h"
#include "pump.h"

void pump_on(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2110      	movs	r1, #16
 8000674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000678:	f000 fbe8 	bl	8000e4c <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}

08000680 <pump_off>:

void pump_off(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2110      	movs	r1, #16
 8000688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068c:	f000 fbde 	bl	8000e4c <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x44>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <HAL_MspInit+0x44>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x44>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x44>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x44>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x44>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <HAL_TIM_PWM_MspInit+0x38>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d10b      	bne.n	8000706 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <HAL_TIM_PWM_MspInit+0x3c>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <HAL_TIM_PWM_MspInit+0x3c>)
 80006f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_TIM_PWM_MspInit+0x3c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40012c00 	.word	0x40012c00
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <HAL_TIM_MspPostInit+0x68>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d11d      	bne.n	800077a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <HAL_TIM_MspPostInit+0x6c>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	4a11      	ldr	r2, [pc, #68]	; (8000788 <HAL_TIM_MspPostInit+0x6c>)
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	6153      	str	r3, [r2, #20]
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <HAL_TIM_MspPostInit+0x6c>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M_IN1_Pin|M_IN2_Pin;
 8000756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800075a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000768:	2306      	movs	r3, #6
 800076a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000776:	f000 f9df 	bl	8000b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40012c00 	.word	0x40012c00
 8000788:	40021000 	.word	0x40021000

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 f884 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <SystemInit+0x20>)
 80007e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ea:	4a05      	ldr	r2, [pc, #20]	; (8000800 <SystemInit+0x20>)
 80007ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800083c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000808:	f7ff ffea 	bl	80007e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	; (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	; (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 fd85 	bl	8003340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000836:	f7ff fd9f 	bl	8000378 <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800083c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000848:	080033d8 	.word	0x080033d8
  ldr r2, =_sbss
 800084c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000850:	20000098 	.word	0x20000098

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>
	...

08000858 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x28>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x28>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f931 	bl	8000ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	200f      	movs	r0, #15
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff ff0e 	bl	8000694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f93b 	bl	8000b1e <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 f911 	bl	8000ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000004 	.word	0x20000004
 80008dc:	2000000c 	.word	0x2000000c
 80008e0:	20000008 	.word	0x20000008

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x20>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_IncTick+0x24>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_IncTick+0x24>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	2000000c 	.word	0x2000000c
 8000908:	20000094 	.word	0x20000094

0800090c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_GetTick+0x14>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000094 	.word	0x20000094

08000924 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800092c:	f7ff ffee 	bl	800090c <HAL_GetTick>
 8000930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d005      	beq.n	800094a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_Delay+0x44>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	461a      	mov	r2, r3
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	4413      	add	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800094a:	bf00      	nop
 800094c:	f7ff ffde 	bl	800090c <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	429a      	cmp	r2, r3
 800095a:	d8f7      	bhi.n	800094c <HAL_Delay+0x28>
  {
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000000c 	.word	0x2000000c

0800096c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000988:	4013      	ands	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099e:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	60d3      	str	r3, [r2, #12]
}
 80009a4:	bf00      	nop
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <__NVIC_GetPriorityGrouping+0x18>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	f003 0307 	and.w	r3, r3, #7
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db0a      	blt.n	80009fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <__NVIC_SetPriority+0x4c>)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	440b      	add	r3, r1
 80009f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f8:	e00a      	b.n	8000a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4908      	ldr	r1, [pc, #32]	; (8000a20 <__NVIC_SetPriority+0x50>)
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	3b04      	subs	r3, #4
 8000a08:	0112      	lsls	r2, r2, #4
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	761a      	strb	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	; 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf28      	it	cs
 8000a42:	2304      	movcs	r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d902      	bls.n	8000a54 <NVIC_EncodePriority+0x30>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3b03      	subs	r3, #3
 8000a52:	e000      	b.n	8000a56 <NVIC_EncodePriority+0x32>
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43d9      	mvns	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	4313      	orrs	r3, r2
         );
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	; 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
	...

08000a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a9c:	d301      	bcc.n	8000aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00f      	b.n	8000ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <SysTick_Config+0x40>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aaa:	210f      	movs	r1, #15
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f7ff ff8e 	bl	80009d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SysTick_Config+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aba:	4b04      	ldr	r3, [pc, #16]	; (8000acc <SysTick_Config+0x40>)
 8000abc:	2207      	movs	r2, #7
 8000abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	e000e010 	.word	0xe000e010

08000ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff47 	bl	800096c <__NVIC_SetPriorityGrouping>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b086      	sub	sp, #24
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff5c 	bl	80009b4 <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff8e 	bl	8000a24 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5d 	bl	80009d0 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ffb0 	bl	8000a8c <SysTick_Config>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b46:	e14e      	b.n	8000de6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	fa01 f303 	lsl.w	r3, r1, r3
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8140 	beq.w	8000de0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d005      	beq.n	8000b78 <HAL_GPIO_Init+0x40>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d130      	bne.n	8000bda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2203      	movs	r2, #3
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	68da      	ldr	r2, [r3, #12]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bae:	2201      	movs	r2, #1
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	091b      	lsrs	r3, r3, #4
 8000bc4:	f003 0201 	and.w	r2, r3, #1
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d017      	beq.n	8000c16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d123      	bne.n	8000c6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	220f      	movs	r2, #15
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691a      	ldr	r2, [r3, #16]
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f003 0307 	and.w	r3, r3, #7
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3208      	adds	r2, #8
 8000c64:	6939      	ldr	r1, [r7, #16]
 8000c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0203 	and.w	r2, r3, #3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f000 809a 	beq.w	8000de0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cac:	4b55      	ldr	r3, [pc, #340]	; (8000e04 <HAL_GPIO_Init+0x2cc>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a54      	ldr	r2, [pc, #336]	; (8000e04 <HAL_GPIO_Init+0x2cc>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b52      	ldr	r3, [pc, #328]	; (8000e04 <HAL_GPIO_Init+0x2cc>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc4:	4a50      	ldr	r2, [pc, #320]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	220f      	movs	r2, #15
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x1e0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a46      	ldr	r2, [pc, #280]	; (8000e0c <HAL_GPIO_Init+0x2d4>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1dc>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a45      	ldr	r2, [pc, #276]	; (8000e10 <HAL_GPIO_Init+0x2d8>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1d8>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <HAL_GPIO_Init+0x2dc>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1d4>
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e006      	b.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	e004      	b.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d10:	2302      	movs	r3, #2
 8000d12:	e002      	b.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d14:	2301      	movs	r3, #1
 8000d16:	e000      	b.n	8000d1a <HAL_GPIO_Init+0x1e2>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	f002 0203 	and.w	r2, r2, #3
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	4093      	lsls	r3, r2
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d2a:	4937      	ldr	r1, [pc, #220]	; (8000e08 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d5c:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d86:	4a24      	ldr	r2, [pc, #144]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <HAL_GPIO_Init+0x2e0>)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	fa22 f303 	lsr.w	r3, r2, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f47f aea9 	bne.w	8000b48 <HAL_GPIO_Init+0x10>
  }
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	48000800 	.word	0x48000800
 8000e14:	48000c00 	.word	0x48000c00
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	691a      	ldr	r2, [r3, #16]
 8000e2c:	887b      	ldrh	r3, [r7, #2]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e34:	2301      	movs	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	e001      	b.n	8000e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e8c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f001 b823 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 817d 	beq.w	80011b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eb8:	4bbc      	ldr	r3, [pc, #752]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec4:	4bb9      	ldr	r3, [pc, #740]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d15c      	bne.n	8000f8a <HAL_RCC_OscConfig+0x10e>
 8000ed0:	4bb6      	ldr	r3, [pc, #728]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d155      	bne.n	8000f8a <HAL_RCC_OscConfig+0x10e>
 8000ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ee2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000eea:	fa93 f3a3 	rbit	r3, r3
 8000eee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ef2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef6:	fab3 f383 	clz	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	095b      	lsrs	r3, r3, #5
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d102      	bne.n	8000f10 <HAL_RCC_OscConfig+0x94>
 8000f0a:	4ba8      	ldr	r3, [pc, #672]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	e015      	b.n	8000f3c <HAL_RCC_OscConfig+0xc0>
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f2c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f38:	4b9c      	ldr	r3, [pc, #624]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f40:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f44:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f48:	fa92 f2a2 	rbit	r2, r2
 8000f4c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f50:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f54:	fab2 f282 	clz	r2, r2
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	f042 0220 	orr.w	r2, r2, #32
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	f002 021f 	and.w	r2, r2, #31
 8000f64:	2101      	movs	r1, #1
 8000f66:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 811f 	beq.w	80011b0 <HAL_RCC_OscConfig+0x334>
 8000f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f040 8116 	bne.w	80011b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f000 bfaf 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x12e>
 8000f9c:	4b83      	ldr	r3, [pc, #524]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a82      	ldr	r2, [pc, #520]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e036      	b.n	8001018 <HAL_RCC_OscConfig+0x19c>
 8000faa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x158>
 8000fba:	4b7c      	ldr	r3, [pc, #496]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7b      	ldr	r2, [pc, #492]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b79      	ldr	r3, [pc, #484]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a78      	ldr	r2, [pc, #480]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e021      	b.n	8001018 <HAL_RCC_OscConfig+0x19c>
 8000fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x184>
 8000fe6:	4b71      	ldr	r3, [pc, #452]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a70      	ldr	r2, [pc, #448]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b6e      	ldr	r3, [pc, #440]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6d      	ldr	r2, [pc, #436]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00b      	b.n	8001018 <HAL_RCC_OscConfig+0x19c>
 8001000:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a69      	ldr	r2, [pc, #420]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8001006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b67      	ldr	r3, [pc, #412]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a66      	ldr	r2, [pc, #408]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001018:	4b64      	ldr	r3, [pc, #400]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	f023 020f 	bic.w	r2, r3, #15
 8001020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	495f      	ldr	r1, [pc, #380]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 800102e:	4313      	orrs	r3, r2
 8001030:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001036:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d059      	beq.n	80010f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fc63 	bl	800090c <HAL_GetTick>
 8001046:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	e00a      	b.n	8001062 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fc5e 	bl	800090c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d902      	bls.n	8001062 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	f000 bf43 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001062:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001066:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800106a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001076:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	fab3 f383 	clz	r3, r3
 800107e:	b2db      	uxtb	r3, r3
 8001080:	095b      	lsrs	r3, r3, #5
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <HAL_RCC_OscConfig+0x218>
 800108e:	4b47      	ldr	r3, [pc, #284]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e015      	b.n	80010c0 <HAL_RCC_OscConfig+0x244>
 8001094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001098:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010a0:	fa93 f3a3 	rbit	r3, r3
 80010a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010bc:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 80010be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010cc:	fa92 f2a2 	rbit	r2, r2
 80010d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010d8:	fab2 f282 	clz	r2, r2
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f002 021f 	and.w	r2, r2, #31
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0ab      	beq.n	800104c <HAL_RCC_OscConfig+0x1d0>
 80010f4:	e05d      	b.n	80011b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fc09 	bl	800090c <HAL_GetTick>
 80010fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fc04 	bl	800090c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b64      	cmp	r3, #100	; 0x64
 800110e:	d902      	bls.n	8001116 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	f000 bee9 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800111a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001122:	fa93 f3a3 	rbit	r3, r3
 8001126:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800112a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	fab3 f383 	clz	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	095b      	lsrs	r3, r3, #5
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <HAL_RCC_OscConfig+0x2cc>
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	e015      	b.n	8001174 <HAL_RCC_OscConfig+0x2f8>
 8001148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800115c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001160:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001164:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001170:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_RCC_OscConfig+0x330>)
 8001172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001174:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001178:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800117c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001180:	fa92 f2a2 	rbit	r2, r2
 8001184:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001188:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800118c:	fab2 f282 	clz	r2, r2
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f002 021f 	and.w	r2, r2, #31
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ab      	bne.n	8001100 <HAL_RCC_OscConfig+0x284>
 80011a8:	e003      	b.n	80011b2 <HAL_RCC_OscConfig+0x336>
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 817d 	beq.w	80014c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c8:	4ba6      	ldr	r3, [pc, #664]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 030c 	and.w	r3, r3, #12
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00b      	beq.n	80011ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011d4:	4ba3      	ldr	r3, [pc, #652]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 030c 	and.w	r3, r3, #12
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d172      	bne.n	80012c6 <HAL_RCC_OscConfig+0x44a>
 80011e0:	4ba0      	ldr	r3, [pc, #640]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d16c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x44a>
 80011ec:	2302      	movs	r3, #2
 80011ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011f6:	fa93 f3a3 	rbit	r3, r3
 80011fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80011fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	fab3 f383 	clz	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	095b      	lsrs	r3, r3, #5
 800120a:	b2db      	uxtb	r3, r3
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b01      	cmp	r3, #1
 8001214:	d102      	bne.n	800121c <HAL_RCC_OscConfig+0x3a0>
 8001216:	4b93      	ldr	r3, [pc, #588]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	e013      	b.n	8001244 <HAL_RCC_OscConfig+0x3c8>
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001222:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800122e:	2302      	movs	r3, #2
 8001230:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001234:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001238:	fa93 f3a3 	rbit	r3, r3
 800123c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001240:	4b88      	ldr	r3, [pc, #544]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	2202      	movs	r2, #2
 8001246:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800124a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800124e:	fa92 f2a2 	rbit	r2, r2
 8001252:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001256:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800125a:	fab2 f282 	clz	r2, r2
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	f042 0220 	orr.w	r2, r2, #32
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	f002 021f 	and.w	r2, r2, #31
 800126a:	2101      	movs	r1, #1
 800126c:	fa01 f202 	lsl.w	r2, r1, r2
 8001270:	4013      	ands	r3, r2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d00a      	beq.n	800128c <HAL_RCC_OscConfig+0x410>
 8001276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d002      	beq.n	800128c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	f000 be2e 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b75      	ldr	r3, [pc, #468]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	21f8      	movs	r1, #248	; 0xf8
 80012a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012aa:	fa91 f1a1 	rbit	r1, r1
 80012ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012b6:	fab1 f181 	clz	r1, r1
 80012ba:	b2c9      	uxtb	r1, r1
 80012bc:	408b      	lsls	r3, r1
 80012be:	4969      	ldr	r1, [pc, #420]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c4:	e0fd      	b.n	80014c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 8088 	beq.w	80013e8 <HAL_RCC_OscConfig+0x56c>
 80012d8:	2301      	movs	r3, #1
 80012da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ee:	fab3 f383 	clz	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	461a      	mov	r2, r3
 8001300:	2301      	movs	r3, #1
 8001302:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb02 	bl	800090c <HAL_GetTick>
 8001308:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fafd 	bl	800090c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d902      	bls.n	8001324 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	f000 bde2 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001336:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	095b      	lsrs	r3, r3, #5
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d102      	bne.n	8001354 <HAL_RCC_OscConfig+0x4d8>
 800134e:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	e013      	b.n	800137c <HAL_RCC_OscConfig+0x500>
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001366:	2302      	movs	r3, #2
 8001368:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800136c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001370:	fa93 f3a3 	rbit	r3, r3
 8001374:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001378:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	2202      	movs	r2, #2
 800137e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001382:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001386:	fa92 f2a2 	rbit	r2, r2
 800138a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800138e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001392:	fab2 f282 	clz	r2, r2
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	f042 0220 	orr.w	r2, r2, #32
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	f002 021f 	and.w	r2, r2, #31
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0af      	beq.n	800130e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	21f8      	movs	r1, #248	; 0xf8
 80013c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013cc:	fa91 f1a1 	rbit	r1, r1
 80013d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013d8:	fab1 f181 	clz	r1, r1
 80013dc:	b2c9      	uxtb	r1, r1
 80013de:	408b      	lsls	r3, r1
 80013e0:	4920      	ldr	r1, [pc, #128]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
 80013e6:	e06c      	b.n	80014c2 <HAL_RCC_OscConfig+0x646>
 80013e8:	2301      	movs	r3, #1
 80013ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80013fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	461a      	mov	r2, r3
 8001410:	2300      	movs	r3, #0
 8001412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fa7a 	bl	800090c <HAL_GetTick>
 8001418:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141c:	e00a      	b.n	8001434 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fa75 	bl	800090c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d902      	bls.n	8001434 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	f000 bd5a 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001434:	2302      	movs	r3, #2
 8001436:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d104      	bne.n	8001468 <HAL_RCC_OscConfig+0x5ec>
 800145e:	4b01      	ldr	r3, [pc, #4]	; (8001464 <HAL_RCC_OscConfig+0x5e8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	e015      	b.n	8001490 <HAL_RCC_OscConfig+0x614>
 8001464:	40021000 	.word	0x40021000
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001472:	fa93 f3a3 	rbit	r3, r3
 8001476:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001480:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800148c:	4bc8      	ldr	r3, [pc, #800]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	2202      	movs	r2, #2
 8001492:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001496:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800149a:	fa92 f2a2 	rbit	r2, r2
 800149e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014a6:	fab2 f282 	clz	r2, r2
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	f042 0220 	orr.w	r2, r2, #32
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	f002 021f 	and.w	r2, r2, #31
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1ad      	bne.n	800141e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8110 	beq.w	80016f8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d079      	beq.n	80015dc <HAL_RCC_OscConfig+0x760>
 80014e8:	2301      	movs	r3, #1
 80014ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80014fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014fe:	fab3 f383 	clz	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	4bab      	ldr	r3, [pc, #684]	; (80017b4 <HAL_RCC_OscConfig+0x938>)
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	461a      	mov	r2, r3
 800150e:	2301      	movs	r3, #1
 8001510:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff f9fb 	bl	800090c <HAL_GetTick>
 8001516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800151a:	e00a      	b.n	8001532 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff f9f6 	bl	800090c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d902      	bls.n	8001532 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	f000 bcdb 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001548:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800154c:	2202      	movs	r2, #2
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001554:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	fa93 f2a3 	rbit	r2, r3
 800155e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001570:	2202      	movs	r2, #2
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	fa93 f2a3 	rbit	r2, r3
 8001582:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800158a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158c:	4b88      	ldr	r3, [pc, #544]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 800158e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001594:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001598:	2102      	movs	r1, #2
 800159a:	6019      	str	r1, [r3, #0]
 800159c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	fa93 f1a3 	rbit	r1, r3
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015b2:	6019      	str	r1, [r3, #0]
  return result;
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fab3 f383 	clz	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2101      	movs	r1, #1
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0a0      	beq.n	800151c <HAL_RCC_OscConfig+0x6a0>
 80015da:	e08d      	b.n	80016f8 <HAL_RCC_OscConfig+0x87c>
 80015dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	fa93 f2a3 	rbit	r2, r3
 80015f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80015fe:	601a      	str	r2, [r3, #0]
  return result;
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001608:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160a:	fab3 f383 	clz	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	461a      	mov	r2, r3
 8001612:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_RCC_OscConfig+0x938>)
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	461a      	mov	r2, r3
 800161a:	2300      	movs	r3, #0
 800161c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161e:	f7ff f975 	bl	800090c <HAL_GetTick>
 8001622:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001626:	e00a      	b.n	800163e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff f970 	bl	800090c <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d902      	bls.n	800163e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	f000 bc55 	b.w	8001ee8 <HAL_RCC_OscConfig+0x106c>
 800163e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001642:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001646:	2202      	movs	r2, #2
 8001648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800165c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001666:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800166a:	2202      	movs	r2, #2
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001672:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fa93 f2a3 	rbit	r2, r3
 800167c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800168e:	2202      	movs	r2, #2
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	fa93 f2a3 	rbit	r2, r3
 80016a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016aa:	4b41      	ldr	r3, [pc, #260]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 80016ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016b6:	2102      	movs	r1, #2
 80016b8:	6019      	str	r1, [r3, #0]
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	fa93 f1a3 	rbit	r1, r3
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016d0:	6019      	str	r1, [r3, #0]
  return result;
 80016d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	2101      	movs	r1, #1
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d197      	bne.n	8001628 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 81a1 	beq.w	8001a50 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 8001716:	69db      	ldr	r3, [r3, #28]
 8001718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d116      	bne.n	800174e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	4a22      	ldr	r2, [pc, #136]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 8001726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172a:	61d3      	str	r3, [r2, #28]
 800172c:	4b20      	ldr	r3, [pc, #128]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001742:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001746:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001748:	2301      	movs	r3, #1
 800174a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <HAL_RCC_OscConfig+0x93c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d11a      	bne.n	8001790 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_RCC_OscConfig+0x93c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a16      	ldr	r2, [pc, #88]	; (80017b8 <HAL_RCC_OscConfig+0x93c>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff f8d1 	bl	800090c <HAL_GetTick>
 800176a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176e:	e009      	b.n	8001784 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001770:	f7ff f8cc 	bl	800090c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b64      	cmp	r3, #100	; 0x64
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e3b1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_RCC_OscConfig+0x93c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0ef      	beq.n	8001770 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10d      	bne.n	80017bc <HAL_RCC_OscConfig+0x940>
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a02      	ldr	r2, [pc, #8]	; (80017b0 <HAL_RCC_OscConfig+0x934>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e03c      	b.n	8001828 <HAL_RCC_OscConfig+0x9ac>
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000
 80017b4:	10908120 	.word	0x10908120
 80017b8:	40007000 	.word	0x40007000
 80017bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x96a>
 80017cc:	4bc1      	ldr	r3, [pc, #772]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4ac0      	ldr	r2, [pc, #768]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	4bbe      	ldr	r3, [pc, #760]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4abd      	ldr	r2, [pc, #756]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e020      	b.n	8001828 <HAL_RCC_OscConfig+0x9ac>
 80017e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x994>
 80017f6:	4bb7      	ldr	r3, [pc, #732]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4ab6      	ldr	r2, [pc, #728]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4bb4      	ldr	r3, [pc, #720]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4ab3      	ldr	r2, [pc, #716]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0x9ac>
 8001810:	4bb0      	ldr	r3, [pc, #704]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4aaf      	ldr	r2, [pc, #700]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	4bad      	ldr	r3, [pc, #692]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4aac      	ldr	r2, [pc, #688]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001822:	f023 0304 	bic.w	r3, r3, #4
 8001826:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8081 	beq.w	800193c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7ff f867 	bl	800090c <HAL_GetTick>
 800183e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff f862 	bl	800090c <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e345      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
 800185c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001860:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001864:	2202      	movs	r2, #2
 8001866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	fa93 f2a3 	rbit	r2, r3
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001884:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001888:	2202      	movs	r2, #2
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001890:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	fa93 f2a3 	rbit	r2, r3
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018a2:	601a      	str	r2, [r3, #0]
  return result;
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ae:	fab3 f383 	clz	r3, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d102      	bne.n	80018c8 <HAL_RCC_OscConfig+0xa4c>
 80018c2:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	e013      	b.n	80018f0 <HAL_RCC_OscConfig+0xa74>
 80018c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018d0:	2202      	movs	r2, #2
 80018d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f2a3 	rbit	r2, r3
 80018e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80018f8:	2102      	movs	r1, #2
 80018fa:	6011      	str	r1, [r2, #0]
 80018fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001900:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	fa92 f1a2 	rbit	r1, r2
 800190a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800190e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001912:	6011      	str	r1, [r2, #0]
  return result;
 8001914:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001918:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	fab2 f282 	clz	r2, r2
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f002 021f 	and.w	r2, r2, #31
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d084      	beq.n	8001844 <HAL_RCC_OscConfig+0x9c8>
 800193a:	e07f      	b.n	8001a3c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7fe ffe6 	bl	800090c <HAL_GetTick>
 8001940:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7fe ffe1 	bl	800090c <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e2c4      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
 800195e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001962:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001966:	2202      	movs	r2, #2
 8001968:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	fa93 f2a3 	rbit	r2, r3
 8001978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800197c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800198a:	2202      	movs	r2, #2
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001992:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	fa93 f2a3 	rbit	r2, r3
 800199c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019a4:	601a      	str	r2, [r3, #0]
  return result;
 80019a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	fab3 f383 	clz	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d102      	bne.n	80019ca <HAL_RCC_OscConfig+0xb4e>
 80019c4:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	e013      	b.n	80019f2 <HAL_RCC_OscConfig+0xb76>
 80019ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019d2:	2202      	movs	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80019f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80019fa:	2102      	movs	r1, #2
 80019fc:	6011      	str	r1, [r2, #0]
 80019fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a02:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a06:	6812      	ldr	r2, [r2, #0]
 8001a08:	fa92 f1a2 	rbit	r1, r2
 8001a0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a10:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a14:	6011      	str	r1, [r2, #0]
  return result;
 8001a16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	fab2 f282 	clz	r2, r2
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	f002 021f 	and.w	r2, r2, #31
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d184      	bne.n	8001946 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a44:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 8242 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_RCC_OscConfig+0xc58>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	f000 8213 	beq.w	8001e96 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f040 8162 	bne.w	8001d46 <HAL_RCC_OscConfig+0xeca>
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a94:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	fa93 f2a3 	rbit	r2, r3
 8001a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aa6:	601a      	str	r2, [r3, #0]
  return result;
 8001aa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ab0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7fe ff20 	bl	800090c <HAL_GetTick>
 8001acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	e00c      	b.n	8001aec <HAL_RCC_OscConfig+0xc70>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7fe ff18 	bl	800090c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e1fd      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001af4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b10:	601a      	str	r2, [r3, #0]
  return result;
 8001b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b16:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	095b      	lsrs	r3, r3, #5
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d102      	bne.n	8001b36 <HAL_RCC_OscConfig+0xcba>
 8001b30:	4bb0      	ldr	r3, [pc, #704]	; (8001df4 <HAL_RCC_OscConfig+0xf78>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	e027      	b.n	8001b86 <HAL_RCC_OscConfig+0xd0a>
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	fa93 f2a3 	rbit	r2, r3
 8001b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	4b9c      	ldr	r3, [pc, #624]	; (8001df4 <HAL_RCC_OscConfig+0xf78>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b8a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b92:	6011      	str	r1, [r2, #0]
 8001b94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b98:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fa92 f1a2 	rbit	r1, r2
 8001ba2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ba6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001baa:	6011      	str	r1, [r2, #0]
  return result;
 8001bac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	fab2 f282 	clz	r2, r2
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f042 0220 	orr.w	r2, r2, #32
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	f002 021f 	and.w	r2, r2, #31
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d182      	bne.n	8001ad8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd2:	4b88      	ldr	r3, [pc, #544]	; (8001df4 <HAL_RCC_OscConfig+0xf78>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	497f      	ldr	r1, [pc, #508]	; (8001df4 <HAL_RCC_OscConfig+0xf78>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c0c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c1e:	601a      	str	r2, [r3, #0]
  return result;
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c28:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7fe fe64 	bl	800090c <HAL_GetTick>
 8001c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c48:	e009      	b.n	8001c5e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7fe fe5f 	bl	800090c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e144      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c62:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c70:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c82:	601a      	str	r2, [r3, #0]
  return result;
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	095b      	lsrs	r3, r3, #5
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xe2c>
 8001ca2:	4b54      	ldr	r3, [pc, #336]	; (8001df4 <HAL_RCC_OscConfig+0xf78>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e027      	b.n	8001cf8 <HAL_RCC_OscConfig+0xe7c>
 8001ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	fa93 f2a3 	rbit	r2, r3
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCC_OscConfig+0xf78>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001cfc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d04:	6011      	str	r1, [r2, #0]
 8001d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d0a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	fa92 f1a2 	rbit	r1, r2
 8001d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d1c:	6011      	str	r1, [r2, #0]
  return result;
 8001d1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d22:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	f042 0220 	orr.w	r2, r2, #32
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f002 021f 	and.w	r2, r2, #31
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d082      	beq.n	8001c4a <HAL_RCC_OscConfig+0xdce>
 8001d44:	e0cf      	b.n	8001ee6 <HAL_RCC_OscConfig+0x106a>
 8001d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d4a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	fa93 f2a3 	rbit	r2, r3
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d6a:	601a      	str	r2, [r3, #0]
  return result;
 8001d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d70:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d74:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	461a      	mov	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe fdbe 	bl	800090c <HAL_GetTick>
 8001d90:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	e009      	b.n	8001daa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d96:	f7fe fdb9 	bl	800090c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e09e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001db2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dce:	601a      	str	r2, [r3, #0]
  return result;
 8001dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	095b      	lsrs	r3, r3, #5
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d104      	bne.n	8001df8 <HAL_RCC_OscConfig+0xf7c>
 8001dee:	4b01      	ldr	r3, [pc, #4]	; (8001df4 <HAL_RCC_OscConfig+0xf78>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	e029      	b.n	8001e48 <HAL_RCC_OscConfig+0xfcc>
 8001df4:	40021000 	.word	0x40021000
 8001df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e18:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e22:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	fa93 f2a3 	rbit	r2, r3
 8001e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <HAL_RCC_OscConfig+0x1078>)
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e4c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e5a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	fa92 f1a2 	rbit	r1, r2
 8001e64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e68:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e6c:	6011      	str	r1, [r2, #0]
  return result;
 8001e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e72:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	b2d2      	uxtb	r2, r2
 8001e7e:	f042 0220 	orr.w	r2, r2, #32
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f002 021f 	and.w	r2, r2, #31
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d180      	bne.n	8001d96 <HAL_RCC_OscConfig+0xf1a>
 8001e94:	e027      	b.n	8001ee6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e01e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_OscConfig+0x1078>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eb2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eb6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001eca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ece:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b09e      	sub	sp, #120	; 0x78
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e162      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f10:	4b90      	ldr	r3, [pc, #576]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d910      	bls.n	8001f40 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b8d      	ldr	r3, [pc, #564]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 0207 	bic.w	r2, r3, #7
 8001f26:	498b      	ldr	r1, [pc, #556]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b89      	ldr	r3, [pc, #548]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e14a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4c:	4b82      	ldr	r3, [pc, #520]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	497f      	ldr	r1, [pc, #508]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80dc 	beq.w	8002124 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d13c      	bne.n	8001fee <HAL_RCC_ClockConfig+0xf6>
 8001f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f7c:	fa93 f3a3 	rbit	r3, r3
 8001f80:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f84:	fab3 f383 	clz	r3, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d102      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xa6>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	e00f      	b.n	8001fbe <HAL_RCC_ClockConfig+0xc6>
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	667b      	str	r3, [r7, #100]	; 0x64
 8001fac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8001fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fba:	4b67      	ldr	r3, [pc, #412]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fc6:	fa92 f2a2 	rbit	r2, r2
 8001fca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d17b      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0f3      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d13c      	bne.n	8002070 <HAL_RCC_ClockConfig+0x178>
 8001ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d102      	bne.n	8002020 <HAL_RCC_ClockConfig+0x128>
 800201a:	4b4f      	ldr	r3, [pc, #316]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	e00f      	b.n	8002040 <HAL_RCC_ClockConfig+0x148>
 8002020:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002024:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	647b      	str	r3, [r7, #68]	; 0x44
 800202e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002032:	643b      	str	r3, [r7, #64]	; 0x40
 8002034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800203c:	4b46      	ldr	r3, [pc, #280]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002044:	63ba      	str	r2, [r7, #56]	; 0x38
 8002046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002048:	fa92 f2a2 	rbit	r2, r2
 800204c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800204e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002050:	fab2 f282 	clz	r2, r2
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f042 0220 	orr.w	r2, r2, #32
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f002 021f 	and.w	r2, r2, #31
 8002060:	2101      	movs	r1, #1
 8002062:	fa01 f202 	lsl.w	r2, r1, r2
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d13a      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b2      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2de>
 8002070:	2302      	movs	r3, #2
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	095b      	lsrs	r3, r3, #5
 8002086:	b2db      	uxtb	r3, r3
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d102      	bne.n	8002098 <HAL_RCC_ClockConfig+0x1a0>
 8002092:	4b31      	ldr	r3, [pc, #196]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	e00d      	b.n	80020b4 <HAL_RCC_ClockConfig+0x1bc>
 8002098:	2302      	movs	r3, #2
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
 80020a4:	2302      	movs	r3, #2
 80020a6:	623b      	str	r3, [r7, #32]
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	4b29      	ldr	r3, [pc, #164]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2202      	movs	r2, #2
 80020b6:	61ba      	str	r2, [r7, #24]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	fa92 f2a2 	rbit	r2, r2
 80020be:	617a      	str	r2, [r7, #20]
  return result;
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	fab2 f282 	clz	r2, r2
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	f042 0220 	orr.w	r2, r2, #32
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f002 021f 	and.w	r2, r2, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	4013      	ands	r3, r2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e079      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	491a      	ldr	r1, [pc, #104]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fc0a 	bl	800090c <HAL_GetTick>
 80020f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7fe fc06 	bl	800090c <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e061      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_RCC_ClockConfig+0x260>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d214      	bcs.n	800215c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4906      	ldr	r1, [pc, #24]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e040      	b.n	80021d6 <HAL_RCC_ClockConfig+0x2de>
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_ClockConfig+0x2e8>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	491a      	ldr	r1, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4912      	ldr	r1, [pc, #72]	; (80021e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800219a:	f000 f829 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x2e8>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a8:	22f0      	movs	r2, #240	; 0xf0
 80021aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	fa92 f2a2 	rbit	r2, r2
 80021b2:	60fa      	str	r2, [r7, #12]
  return result;
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	40d3      	lsrs	r3, r2
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_ClockConfig+0x2ec>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	fa21 f303 	lsr.w	r3, r1, r3
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <HAL_RCC_ClockConfig+0x2f0>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_RCC_ClockConfig+0x2f4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fb58 	bl	8000884 <HAL_InitTick>
  
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3778      	adds	r7, #120	; 0x78
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	080033a0 	.word	0x080033a0
 80021e8:	20000004 	.word	0x20000004
 80021ec:	20000008 	.word	0x20000008

080021f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x30>
 800221a:	2b08      	cmp	r3, #8
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x36>
 800221e:	e03c      	b.n	800229a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002222:	623b      	str	r3, [r7, #32]
      break;
 8002224:	e03c      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800222c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002230:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	fa92 f2a2 	rbit	r2, r2
 8002238:	607a      	str	r2, [r7, #4]
  return result;
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	fab2 f282 	clz	r2, r2
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	40d3      	lsrs	r3, r2
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	220f      	movs	r2, #15
 8002254:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	fa92 f2a2 	rbit	r2, r2
 800225c:	60fa      	str	r2, [r7, #12]
  return result;
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	fab2 f282 	clz	r2, r2
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	40d3      	lsrs	r3, r2
 8002268:	4a14      	ldr	r2, [pc, #80]	; (80022bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
 8002288:	e004      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4a0c      	ldr	r2, [pc, #48]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	623b      	str	r3, [r7, #32]
      break;
 8002298:	e002      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800229c:	623b      	str	r3, [r7, #32]
      break;
 800229e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a0:	6a3b      	ldr	r3, [r7, #32]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	372c      	adds	r7, #44	; 0x2c
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	007a1200 	.word	0x007a1200
 80022b8:	080033b0 	.word	0x080033b0
 80022bc:	080033c0 	.word	0x080033c0
 80022c0:	003d0900 	.word	0x003d0900

080022c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b092      	sub	sp, #72	; 0x48
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80cd 	beq.w	8002482 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e8:	4b86      	ldr	r3, [pc, #536]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10e      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f4:	4b83      	ldr	r3, [pc, #524]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	4a82      	ldr	r2, [pc, #520]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fe:	61d3      	str	r3, [r2, #28]
 8002300:	4b80      	ldr	r3, [pc, #512]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230c:	2301      	movs	r3, #1
 800230e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b7d      	ldr	r3, [pc, #500]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231e:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a79      	ldr	r2, [pc, #484]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002328:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232a:	f7fe faef 	bl	800090c <HAL_GetTick>
 800232e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	e008      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002332:	f7fe faeb 	bl	800090c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	; 0x64
 800233e:	d901      	bls.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0db      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002344:	4b70      	ldr	r3, [pc, #448]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002350:	4b6c      	ldr	r3, [pc, #432]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800235a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d07d      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002368:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800236a:	429a      	cmp	r2, r3
 800236c:	d076      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	4b5e      	ldr	r3, [pc, #376]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	461a      	mov	r2, r3
 8002398:	2301      	movs	r3, #1
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	fa93 f3a3 	rbit	r3, r3
 80023a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	4b55      	ldr	r3, [pc, #340]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	461a      	mov	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023c0:	4a50      	ldr	r2, [pc, #320]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d045      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fa9c 	bl	800090c <HAL_GetTick>
 80023d4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d6:	e00a      	b.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d8:	f7fe fa98 	bl	800090c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e086      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x238>
 80023ee:	2302      	movs	r3, #2
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	2302      	movs	r3, #2
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	61fb      	str	r3, [r7, #28]
  return result;
 8002406:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	fab3 f383 	clz	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f043 0302 	orr.w	r3, r3, #2
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d102      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800241c:	4b39      	ldr	r3, [pc, #228]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	e007      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	fa93 f3a3 	rbit	r3, r3
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2202      	movs	r2, #2
 8002434:	613a      	str	r2, [r7, #16]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	fa92 f2a2 	rbit	r2, r2
 800243c:	60fa      	str	r2, [r7, #12]
  return result;
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f002 021f 	and.w	r2, r2, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0bd      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800245c:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4926      	ldr	r1, [pc, #152]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800246a:	4313      	orrs	r3, r2
 800246c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800246e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	491a      	ldr	r1, [pc, #104]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f023 0210 	bic.w	r2, r3, #16
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	490b      	ldr	r1, [pc, #44]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3748      	adds	r7, #72	; 0x48
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	10908100 	.word	0x10908100

08002510 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e049      	b.n	80025b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d106      	bne.n	800253c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe f8d0 	bl	80006dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f000 fac4 	bl	8002adc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_TIM_PWM_Start+0x24>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b01      	cmp	r3, #1
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e03c      	b.n	800265e <HAL_TIM_PWM_Start+0x9e>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d109      	bne.n	80025fe <HAL_TIM_PWM_Start+0x3e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	e02f      	b.n	800265e <HAL_TIM_PWM_Start+0x9e>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d109      	bne.n	8002618 <HAL_TIM_PWM_Start+0x58>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	e022      	b.n	800265e <HAL_TIM_PWM_Start+0x9e>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d109      	bne.n	8002632 <HAL_TIM_PWM_Start+0x72>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b01      	cmp	r3, #1
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	e015      	b.n	800265e <HAL_TIM_PWM_Start+0x9e>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b10      	cmp	r3, #16
 8002636:	d109      	bne.n	800264c <HAL_TIM_PWM_Start+0x8c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b01      	cmp	r3, #1
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e008      	b.n	800265e <HAL_TIM_PWM_Start+0x9e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e088      	b.n	8002778 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d104      	bne.n	8002676 <HAL_TIM_PWM_Start+0xb6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002674:	e023      	b.n	80026be <HAL_TIM_PWM_Start+0xfe>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d104      	bne.n	8002686 <HAL_TIM_PWM_Start+0xc6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002684:	e01b      	b.n	80026be <HAL_TIM_PWM_Start+0xfe>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start+0xd6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002694:	e013      	b.n	80026be <HAL_TIM_PWM_Start+0xfe>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b0c      	cmp	r3, #12
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_PWM_Start+0xe6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a4:	e00b      	b.n	80026be <HAL_TIM_PWM_Start+0xfe>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_PWM_Start+0xf6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b4:	e003      	b.n	80026be <HAL_TIM_PWM_Start+0xfe>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2202      	movs	r2, #2
 80026ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2201      	movs	r2, #1
 80026c4:	6839      	ldr	r1, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fd26 	bl	8003118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2b      	ldr	r2, [pc, #172]	; (8002780 <HAL_TIM_PWM_Start+0x1c0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00e      	beq.n	80026f4 <HAL_TIM_PWM_Start+0x134>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_TIM_PWM_Start+0x1c4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_TIM_PWM_Start+0x134>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a28      	ldr	r2, [pc, #160]	; (8002788 <HAL_TIM_PWM_Start+0x1c8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d004      	beq.n	80026f4 <HAL_TIM_PWM_Start+0x134>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_TIM_PWM_Start+0x1cc>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_PWM_Start+0x138>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_TIM_PWM_Start+0x13a>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_TIM_PWM_Start+0x1c0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00e      	beq.n	8002736 <HAL_TIM_PWM_Start+0x176>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002720:	d009      	beq.n	8002736 <HAL_TIM_PWM_Start+0x176>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1a      	ldr	r2, [pc, #104]	; (8002790 <HAL_TIM_PWM_Start+0x1d0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d004      	beq.n	8002736 <HAL_TIM_PWM_Start+0x176>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a14      	ldr	r2, [pc, #80]	; (8002784 <HAL_TIM_PWM_Start+0x1c4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d115      	bne.n	8002762 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_TIM_PWM_Start+0x1d4>)
 800273e:	4013      	ands	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d015      	beq.n	8002774 <HAL_TIM_PWM_Start+0x1b4>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274e:	d011      	beq.n	8002774 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002760:	e008      	b.n	8002774 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f042 0201 	orr.w	r2, r2, #1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e000      	b.n	8002776 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40012c00 	.word	0x40012c00
 8002784:	40014000 	.word	0x40014000
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800
 8002790:	40000400 	.word	0x40000400
 8002794:	00010007 	.word	0x00010007

08002798 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	6839      	ldr	r1, [r7, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fcb4 	bl	8003118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <HAL_TIM_PWM_Stop+0x10c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00e      	beq.n	80027d8 <HAL_TIM_PWM_Stop+0x40>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a3a      	ldr	r2, [pc, #232]	; (80028a8 <HAL_TIM_PWM_Stop+0x110>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d009      	beq.n	80027d8 <HAL_TIM_PWM_Stop+0x40>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a38      	ldr	r2, [pc, #224]	; (80028ac <HAL_TIM_PWM_Stop+0x114>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_TIM_PWM_Stop+0x40>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <HAL_TIM_PWM_Stop+0x118>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_TIM_PWM_Stop+0x44>
 80027d8:	2301      	movs	r3, #1
 80027da:	e000      	b.n	80027de <HAL_TIM_PWM_Stop+0x46>
 80027dc:	2300      	movs	r3, #0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d017      	beq.n	8002812 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6a1a      	ldr	r2, [r3, #32]
 80027e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <HAL_TIM_PWM_Stop+0x7a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	f240 4344 	movw	r3, #1092	; 0x444
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d107      	bne.n	8002812 <HAL_TIM_PWM_Stop+0x7a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	f241 1311 	movw	r3, #4369	; 0x1111
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <HAL_TIM_PWM_Stop+0xaa>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a1a      	ldr	r2, [r3, #32]
 8002828:	f240 4344 	movw	r3, #1092	; 0x444
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_TIM_PWM_Stop+0xaa>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d104      	bne.n	8002852 <HAL_TIM_PWM_Stop+0xba>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002850:	e023      	b.n	800289a <HAL_TIM_PWM_Stop+0x102>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d104      	bne.n	8002862 <HAL_TIM_PWM_Stop+0xca>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	e01b      	b.n	800289a <HAL_TIM_PWM_Stop+0x102>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d104      	bne.n	8002872 <HAL_TIM_PWM_Stop+0xda>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002870:	e013      	b.n	800289a <HAL_TIM_PWM_Stop+0x102>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d104      	bne.n	8002882 <HAL_TIM_PWM_Stop+0xea>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002880:	e00b      	b.n	800289a <HAL_TIM_PWM_Stop+0x102>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b10      	cmp	r3, #16
 8002886:	d104      	bne.n	8002892 <HAL_TIM_PWM_Stop+0xfa>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002890:	e003      	b.n	800289a <HAL_TIM_PWM_Stop+0x102>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40014000 	.word	0x40014000
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40014800 	.word	0x40014800

080028b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0ff      	b.n	8002ad2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b14      	cmp	r3, #20
 80028de:	f200 80f0 	bhi.w	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	0800293d 	.word	0x0800293d
 80028ec:	08002ac3 	.word	0x08002ac3
 80028f0:	08002ac3 	.word	0x08002ac3
 80028f4:	08002ac3 	.word	0x08002ac3
 80028f8:	0800297d 	.word	0x0800297d
 80028fc:	08002ac3 	.word	0x08002ac3
 8002900:	08002ac3 	.word	0x08002ac3
 8002904:	08002ac3 	.word	0x08002ac3
 8002908:	080029bf 	.word	0x080029bf
 800290c:	08002ac3 	.word	0x08002ac3
 8002910:	08002ac3 	.word	0x08002ac3
 8002914:	08002ac3 	.word	0x08002ac3
 8002918:	080029ff 	.word	0x080029ff
 800291c:	08002ac3 	.word	0x08002ac3
 8002920:	08002ac3 	.word	0x08002ac3
 8002924:	08002ac3 	.word	0x08002ac3
 8002928:	08002a41 	.word	0x08002a41
 800292c:	08002ac3 	.word	0x08002ac3
 8002930:	08002ac3 	.word	0x08002ac3
 8002934:	08002ac3 	.word	0x08002ac3
 8002938:	08002a81 	.word	0x08002a81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f942 	bl	8002bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0208 	orr.w	r2, r2, #8
 8002956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0204 	bic.w	r2, r2, #4
 8002966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6999      	ldr	r1, [r3, #24]
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	619a      	str	r2, [r3, #24]
      break;
 800297a:	e0a5      	b.n	8002ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f9a8 	bl	8002cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6999      	ldr	r1, [r3, #24]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	021a      	lsls	r2, r3, #8
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]
      break;
 80029bc:	e084      	b.n	8002ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fa07 	bl	8002dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0208 	orr.w	r2, r2, #8
 80029d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69da      	ldr	r2, [r3, #28]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0204 	bic.w	r2, r2, #4
 80029e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69d9      	ldr	r1, [r3, #28]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	61da      	str	r2, [r3, #28]
      break;
 80029fc:	e064      	b.n	8002ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fa65 	bl	8002ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69d9      	ldr	r1, [r3, #28]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	021a      	lsls	r2, r3, #8
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	61da      	str	r2, [r3, #28]
      break;
 8002a3e:	e043      	b.n	8002ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 faa8 	bl	8002f9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0208 	orr.w	r2, r2, #8
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0204 	bic.w	r2, r2, #4
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002a7e:	e023      	b.n	8002ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 fae6 	bl	8003058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	021a      	lsls	r2, r3, #8
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ac0:	e002      	b.n	8002ac8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop

08002adc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a32      	ldr	r2, [pc, #200]	; (8002bb8 <TIM_Base_SetConfig+0xdc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <TIM_Base_SetConfig+0x28>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afa:	d003      	beq.n	8002b04 <TIM_Base_SetConfig+0x28>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a2f      	ldr	r2, [pc, #188]	; (8002bbc <TIM_Base_SetConfig+0xe0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <TIM_Base_SetConfig+0xdc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d013      	beq.n	8002b46 <TIM_Base_SetConfig+0x6a>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d00f      	beq.n	8002b46 <TIM_Base_SetConfig+0x6a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a24      	ldr	r2, [pc, #144]	; (8002bbc <TIM_Base_SetConfig+0xe0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00b      	beq.n	8002b46 <TIM_Base_SetConfig+0x6a>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <TIM_Base_SetConfig+0xe4>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d007      	beq.n	8002b46 <TIM_Base_SetConfig+0x6a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <TIM_Base_SetConfig+0xe8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <TIM_Base_SetConfig+0x6a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a21      	ldr	r2, [pc, #132]	; (8002bc8 <TIM_Base_SetConfig+0xec>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d108      	bne.n	8002b58 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <TIM_Base_SetConfig+0xdc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <TIM_Base_SetConfig+0xc0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a0e      	ldr	r2, [pc, #56]	; (8002bc0 <TIM_Base_SetConfig+0xe4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_Base_SetConfig+0xc0>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	; (8002bc4 <TIM_Base_SetConfig+0xe8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_Base_SetConfig+0xc0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <TIM_Base_SetConfig+0xec>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d103      	bne.n	8002ba4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40014800 	.word	0x40014800

08002bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0201 	bic.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 0302 	bic.w	r3, r3, #2
 8002c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a28      	ldr	r2, [pc, #160]	; (8002cc8 <TIM_OC1_SetConfig+0xfc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00b      	beq.n	8002c44 <TIM_OC1_SetConfig+0x78>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <TIM_OC1_SetConfig+0x100>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <TIM_OC1_SetConfig+0x78>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <TIM_OC1_SetConfig+0x104>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d003      	beq.n	8002c44 <TIM_OC1_SetConfig+0x78>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a25      	ldr	r2, [pc, #148]	; (8002cd4 <TIM_OC1_SetConfig+0x108>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d10c      	bne.n	8002c5e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f023 0308 	bic.w	r3, r3, #8
 8002c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a19      	ldr	r2, [pc, #100]	; (8002cc8 <TIM_OC1_SetConfig+0xfc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00b      	beq.n	8002c7e <TIM_OC1_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <TIM_OC1_SetConfig+0x100>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <TIM_OC1_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a17      	ldr	r2, [pc, #92]	; (8002cd0 <TIM_OC1_SetConfig+0x104>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d003      	beq.n	8002c7e <TIM_OC1_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <TIM_OC1_SetConfig+0x108>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d111      	bne.n	8002ca2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	621a      	str	r2, [r3, #32]
}
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	40014000 	.word	0x40014000
 8002cd0:	40014400 	.word	0x40014400
 8002cd4:	40014800 	.word	0x40014800

08002cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0320 	bic.w	r3, r3, #32
 8002d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a24      	ldr	r2, [pc, #144]	; (8002dc8 <TIM_OC2_SetConfig+0xf0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10d      	bne.n	8002d58 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a1b      	ldr	r2, [pc, #108]	; (8002dc8 <TIM_OC2_SetConfig+0xf0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00b      	beq.n	8002d78 <TIM_OC2_SetConfig+0xa0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <TIM_OC2_SetConfig+0xf4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d007      	beq.n	8002d78 <TIM_OC2_SetConfig+0xa0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <TIM_OC2_SetConfig+0xf8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d003      	beq.n	8002d78 <TIM_OC2_SetConfig+0xa0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <TIM_OC2_SetConfig+0xfc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d113      	bne.n	8002da0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d7e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d86:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40014000 	.word	0x40014000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800

08002dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0303 	bic.w	r3, r3, #3
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a23      	ldr	r2, [pc, #140]	; (8002ec4 <TIM_OC3_SetConfig+0xec>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10d      	bne.n	8002e56 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e54:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <TIM_OC3_SetConfig+0xec>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_OC3_SetConfig+0x9e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a19      	ldr	r2, [pc, #100]	; (8002ec8 <TIM_OC3_SetConfig+0xf0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_OC3_SetConfig+0x9e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <TIM_OC3_SetConfig+0xf4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_OC3_SetConfig+0x9e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <TIM_OC3_SetConfig+0xf8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40012c00 	.word	0x40012c00
 8002ec8:	40014000 	.word	0x40014000
 8002ecc:	40014400 	.word	0x40014400
 8002ed0:	40014800 	.word	0x40014800

08002ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	031b      	lsls	r3, r3, #12
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <TIM_OC4_SetConfig+0xb8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d00b      	beq.n	8002f50 <TIM_OC4_SetConfig+0x7c>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <TIM_OC4_SetConfig+0xbc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d007      	beq.n	8002f50 <TIM_OC4_SetConfig+0x7c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <TIM_OC4_SetConfig+0xc0>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d003      	beq.n	8002f50 <TIM_OC4_SetConfig+0x7c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <TIM_OC4_SetConfig+0xc4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d109      	bne.n	8002f64 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	621a      	str	r2, [r3, #32]
}
 8002f7e:	bf00      	nop
 8002f80:	371c      	adds	r7, #28
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40012c00 	.word	0x40012c00
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800

08002f9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002fe0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <TIM_OC5_SetConfig+0xac>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <TIM_OC5_SetConfig+0x72>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <TIM_OC5_SetConfig+0xb0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <TIM_OC5_SetConfig+0x72>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <TIM_OC5_SetConfig+0xb4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_OC5_SetConfig+0x72>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a12      	ldr	r2, [pc, #72]	; (8003054 <TIM_OC5_SetConfig+0xb8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d109      	bne.n	8003022 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003014:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4313      	orrs	r3, r2
 8003020:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	621a      	str	r2, [r3, #32]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40012c00 	.word	0x40012c00
 800304c:	40014000 	.word	0x40014000
 8003050:	40014400 	.word	0x40014400
 8003054:	40014800 	.word	0x40014800

08003058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800308a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800309e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	051b      	lsls	r3, r3, #20
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a16      	ldr	r2, [pc, #88]	; (8003108 <TIM_OC6_SetConfig+0xb0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00b      	beq.n	80030cc <TIM_OC6_SetConfig+0x74>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <TIM_OC6_SetConfig+0xb4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d007      	beq.n	80030cc <TIM_OC6_SetConfig+0x74>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a14      	ldr	r2, [pc, #80]	; (8003110 <TIM_OC6_SetConfig+0xb8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_OC6_SetConfig+0x74>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a13      	ldr	r2, [pc, #76]	; (8003114 <TIM_OC6_SetConfig+0xbc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d109      	bne.n	80030e0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40014000 	.word	0x40014000
 8003110:	40014400 	.word	0x40014400
 8003114:	40014800 	.word	0x40014800

08003118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2201      	movs	r2, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1a      	ldr	r2, [r3, #32]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	43db      	mvns	r3, r3
 800313a:	401a      	ands	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e054      	b.n	8003226 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a24      	ldr	r2, [pc, #144]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d108      	bne.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d009      	beq.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a11      	ldr	r2, [pc, #68]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10c      	bne.n	8003214 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	4313      	orrs	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40012c00 	.word	0x40012c00
 8003238:	40000400 	.word	0x40000400
 800323c:	40014000 	.word	0x40014000

08003240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e060      	b.n	800331e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	699b      	ldr	r3, [r3, #24]
 80032d0:	041b      	lsls	r3, r3, #16
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d115      	bne.n	800330c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	051b      	lsls	r3, r3, #20
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40012c00 	.word	0x40012c00

08003330 <memset>:
 8003330:	4402      	add	r2, r0
 8003332:	4603      	mov	r3, r0
 8003334:	4293      	cmp	r3, r2
 8003336:	d100      	bne.n	800333a <memset+0xa>
 8003338:	4770      	bx	lr
 800333a:	f803 1b01 	strb.w	r1, [r3], #1
 800333e:	e7f9      	b.n	8003334 <memset+0x4>

08003340 <__libc_init_array>:
 8003340:	b570      	push	{r4, r5, r6, lr}
 8003342:	4d0d      	ldr	r5, [pc, #52]	; (8003378 <__libc_init_array+0x38>)
 8003344:	4c0d      	ldr	r4, [pc, #52]	; (800337c <__libc_init_array+0x3c>)
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	10a4      	asrs	r4, r4, #2
 800334a:	2600      	movs	r6, #0
 800334c:	42a6      	cmp	r6, r4
 800334e:	d109      	bne.n	8003364 <__libc_init_array+0x24>
 8003350:	4d0b      	ldr	r5, [pc, #44]	; (8003380 <__libc_init_array+0x40>)
 8003352:	4c0c      	ldr	r4, [pc, #48]	; (8003384 <__libc_init_array+0x44>)
 8003354:	f000 f818 	bl	8003388 <_init>
 8003358:	1b64      	subs	r4, r4, r5
 800335a:	10a4      	asrs	r4, r4, #2
 800335c:	2600      	movs	r6, #0
 800335e:	42a6      	cmp	r6, r4
 8003360:	d105      	bne.n	800336e <__libc_init_array+0x2e>
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f855 3b04 	ldr.w	r3, [r5], #4
 8003368:	4798      	blx	r3
 800336a:	3601      	adds	r6, #1
 800336c:	e7ee      	b.n	800334c <__libc_init_array+0xc>
 800336e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003372:	4798      	blx	r3
 8003374:	3601      	adds	r6, #1
 8003376:	e7f2      	b.n	800335e <__libc_init_array+0x1e>
 8003378:	080033d0 	.word	0x080033d0
 800337c:	080033d0 	.word	0x080033d0
 8003380:	080033d0 	.word	0x080033d0
 8003384:	080033d4 	.word	0x080033d4

08003388 <_init>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr

08003394 <_fini>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	bf00      	nop
 8003398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339a:	bc08      	pop	{r3}
 800339c:	469e      	mov	lr, r3
 800339e:	4770      	bx	lr
