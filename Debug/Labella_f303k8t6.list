
Labella_f303k8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003268  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003420  08003420  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003420  08003420  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003420  08003420  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003424  08003424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          0000007c  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009dcd  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c71  00000000  00000000  00029e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a40  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007d0  00000000  00000000  0002c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a68d  00000000  00000000  0002ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d4da  00000000  00000000  0004737d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009c5ea  00000000  00000000  00054857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000028dc  00000000  00000000  000f0e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000f3720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033d8 	.word	0x080033d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	080033d8 	.word	0x080033d8

080001c8 <button_read_debounce>:
uint8_t isEvent = 0;
extern int time_duration;
extern uint8_t isButton;

uint8_t button_read_debounce(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	uint8_t current_state = HAL_GPIO_ReadPin(button.port, button.pin);
 80001ce:	4b22      	ldr	r3, [pc, #136]	; (8000258 <button_read_debounce+0x90>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a21      	ldr	r2, [pc, #132]	; (8000258 <button_read_debounce+0x90>)
 80001d4:	8892      	ldrh	r2, [r2, #4]
 80001d6:	4611      	mov	r1, r2
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fe47 	bl	8000e6c <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	71fb      	strb	r3, [r7, #7]
	uint32_t current_time = HAL_GetTick();
 80001e2:	f000 fbdf 	bl	80009a4 <HAL_GetTick>
 80001e6:	6038      	str	r0, [r7, #0]
	isEvent = 0;
 80001e8:	4b1c      	ldr	r3, [pc, #112]	; (800025c <button_read_debounce+0x94>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	701a      	strb	r2, [r3, #0]

	if (current_state != button.last_state){
 80001ee:	4b1a      	ldr	r3, [pc, #104]	; (8000258 <button_read_debounce+0x90>)
 80001f0:	7e1b      	ldrb	r3, [r3, #24]
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d028      	beq.n	800024a <button_read_debounce+0x82>
		button.last_state = current_state;
 80001f8:	4a17      	ldr	r2, [pc, #92]	; (8000258 <button_read_debounce+0x90>)
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	7613      	strb	r3, [r2, #24]
		isEvent = 1;
 80001fe:	4b17      	ldr	r3, [pc, #92]	; (800025c <button_read_debounce+0x94>)
 8000200:	2201      	movs	r2, #1
 8000202:	701a      	strb	r2, [r3, #0]
		if (current_time - button.last_read_time >= DEFAULT_DEBOUNCE_TIMEOUT_MS){
 8000204:	4b14      	ldr	r3, [pc, #80]	; (8000258 <button_read_debounce+0x90>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	683a      	ldr	r2, [r7, #0]
 800020a:	1ad3      	subs	r3, r2, r3
 800020c:	2b31      	cmp	r3, #49	; 0x31
 800020e:	d91c      	bls.n	800024a <button_read_debounce+0x82>
			button.last_read_time = current_time;
 8000210:	4a11      	ldr	r2, [pc, #68]	; (8000258 <button_read_debounce+0x90>)
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	6153      	str	r3, [r2, #20]

			if (current_state == GPIO_PIN_SET)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d103      	bne.n	8000224 <button_read_debounce+0x5c>
			{
				button.pressedTick = current_time;
 800021c:	4a0e      	ldr	r2, [pc, #56]	; (8000258 <button_read_debounce+0x90>)
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	60d3      	str	r3, [r2, #12]
 8000222:	e012      	b.n	800024a <button_read_debounce+0x82>
			}
			else
			{
				button.releasedTick = current_time;
 8000224:	4a0c      	ldr	r2, [pc, #48]	; (8000258 <button_read_debounce+0x90>)
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	6113      	str	r3, [r2, #16]
				if (button.releasedTick - button.pressedTick >= DEFAULT_LONG_HOLD_TIMEOUT )
 800022a:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <button_read_debounce+0x90>)
 800022c:	691a      	ldr	r2, [r3, #16]
 800022e:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <button_read_debounce+0x90>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	1ad3      	subs	r3, r2, r3
 8000234:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000238:	4293      	cmp	r3, r2
 800023a:	d903      	bls.n	8000244 <button_read_debounce+0x7c>
				{
					button.event = LONG_CLICK;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <button_read_debounce+0x90>)
 800023e:	2203      	movs	r2, #3
 8000240:	765a      	strb	r2, [r3, #25]
 8000242:	e002      	b.n	800024a <button_read_debounce+0x82>
				}
				else
				{
					button.event = RELEASED;
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <button_read_debounce+0x90>)
 8000246:	2201      	movs	r2, #1
 8000248:	765a      	strb	r2, [r3, #25]
				}
			}
		}
	}
	return isEvent;
 800024a:	4b04      	ldr	r3, [pc, #16]	; (800025c <button_read_debounce+0x94>)
 800024c:	781b      	ldrb	r3, [r3, #0]
}
 800024e:	4618      	mov	r0, r3
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	20000000 	.word	0x20000000
 800025c:	20000048 	.word	0x20000048

08000260 <button_handler>:

void button_handler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	if (button_read_debounce())
 8000264:	f7ff ffb0 	bl	80001c8 <button_read_debounce>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d01f      	beq.n	80002ae <button_handler+0x4e>
	{
		switch (button.event)
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <button_handler+0x54>)
 8000270:	7e5b      	ldrb	r3, [r3, #25]
 8000272:	2b03      	cmp	r3, #3
 8000274:	d81a      	bhi.n	80002ac <button_handler+0x4c>
 8000276:	a201      	add	r2, pc, #4	; (adr r2, 800027c <button_handler+0x1c>)
 8000278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800027c:	0800028d 	.word	0x0800028d
 8000280:	08000295 	.word	0x08000295
 8000284:	0800029d 	.word	0x0800029d
 8000288:	080002a5 	.word	0x080002a5
		{
		case IDLE:
		{
			isButton = 0;
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <button_handler+0x58>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
			break;
 8000292:	e00c      	b.n	80002ae <button_handler+0x4e>
		}
		case RELEASED:
		{
			isButton = 1;
 8000294:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <button_handler+0x58>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
			break;
 800029a:	e008      	b.n	80002ae <button_handler+0x4e>
		}
		case PRESSED:
		{
			isButton = 2;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <button_handler+0x58>)
 800029e:	2202      	movs	r2, #2
 80002a0:	701a      	strb	r2, [r3, #0]
			break;
 80002a2:	e004      	b.n	80002ae <button_handler+0x4e>
		}
		case LONG_CLICK:
		{
			isButton = 3;
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <button_handler+0x58>)
 80002a6:	2203      	movs	r2, #3
 80002a8:	701a      	strb	r2, [r3, #0]
			break;
 80002aa:	e000      	b.n	80002ae <button_handler+0x4e>
		}
		default:
			break;
 80002ac:	bf00      	nop
		}

	}


}
 80002ae:	bf00      	nop
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000000 	.word	0x20000000
 80002b8:	20000099 	.word	0x20000099

080002bc <led_on>:
 */
#include "main.h"
#include "led.h"

void led_on(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2140      	movs	r1, #64	; 0x40
 80002c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c8:	f000 fde8 	bl	8000e9c <HAL_GPIO_WritePin>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <led_off>:

void led_off(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2140      	movs	r1, #64	; 0x40
 80002d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002dc:	f000 fdde 	bl	8000e9c <HAL_GPIO_WritePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002e8:	f000 fb02 	bl	80008f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ec:	f000 f888 	bl	8000400 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002f0:	f000 f97c 	bl	80005ec <MX_GPIO_Init>
	MX_TIM1_Init();
 80002f4:	f000 f8de 	bl	80004b4 <MX_TIM1_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		button_handler();
 80002f8:	f7ff ffb2 	bl	8000260 <button_handler>
		current_time = HAL_GetTick();
 80002fc:	f000 fb52 	bl	80009a4 <HAL_GetTick>
 8000300:	4603      	mov	r3, r0
 8000302:	4a3a      	ldr	r2, [pc, #232]	; (80003ec <main+0x108>)
 8000304:	6013      	str	r3, [r2, #0]

		if (isButton == 1)
 8000306:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <main+0x10c>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d1f4      	bne.n	80002f8 <main+0x14>
		{
			switch (state)
 800030e:	4b39      	ldr	r3, [pc, #228]	; (80003f4 <main+0x110>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b02      	cmp	r3, #2
 8000314:	d03c      	beq.n	8000390 <main+0xac>
 8000316:	2b02      	cmp	r3, #2
 8000318:	dcee      	bgt.n	80002f8 <main+0x14>
 800031a:	2b00      	cmp	r3, #0
 800031c:	d002      	beq.n	8000324 <main+0x40>
 800031e:	2b01      	cmp	r3, #1
 8000320:	d011      	beq.n	8000346 <main+0x62>
 8000322:	e062      	b.n	80003ea <main+0x106>
			{
			case STATE_1:
			{
					led_on();
 8000324:	f7ff ffca 	bl	80002bc <led_on>
					pump_on();
 8000328:	f000 f9ec 	bl	8000704 <pump_on>
					motorRight_on();
 800032c:	f000 f9c2 	bl	80006b4 <motorRight_on>
					motorLeft_off();
 8000330:	f000 f9de 	bl	80006f0 <motorLeft_off>
					last_action_time = HAL_GetTick();
 8000334:	f000 fb36 	bl	80009a4 <HAL_GetTick>
 8000338:	4603      	mov	r3, r0
 800033a:	4a2f      	ldr	r2, [pc, #188]	; (80003f8 <main+0x114>)
 800033c:	6013      	str	r3, [r2, #0]
					state = STATE_2;
 800033e:	4b2d      	ldr	r3, [pc, #180]	; (80003f4 <main+0x110>)
 8000340:	2201      	movs	r2, #1
 8000342:	701a      	strb	r2, [r3, #0]

				break;
 8000344:	e051      	b.n	80003ea <main+0x106>
			}
			case STATE_2:
			{
				if(flagFirstTime ==1)
 8000346:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <main+0x118>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d107      	bne.n	800035e <main+0x7a>
				{
					last_action_time =HAL_GetTick();
 800034e:	f000 fb29 	bl	80009a4 <HAL_GetTick>
 8000352:	4603      	mov	r3, r0
 8000354:	4a28      	ldr	r2, [pc, #160]	; (80003f8 <main+0x114>)
 8000356:	6013      	str	r3, [r2, #0]
					flagFirstTime = 0;
 8000358:	4b28      	ldr	r3, [pc, #160]	; (80003fc <main+0x118>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
				}
				if((current_time - last_action_time)>= (TIME_DURATION))
 800035e:	4b23      	ldr	r3, [pc, #140]	; (80003ec <main+0x108>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <main+0x114>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	1ad3      	subs	r3, r2, r3
 8000368:	f241 3287 	movw	r2, #4999	; 0x1387
 800036c:	4293      	cmp	r3, r2
 800036e:	d939      	bls.n	80003e4 <main+0x100>
				{
					flagFirstTime =1;
 8000370:	4b22      	ldr	r3, [pc, #136]	; (80003fc <main+0x118>)
 8000372:	2201      	movs	r2, #1
 8000374:	701a      	strb	r2, [r3, #0]
					motorRight_off();
 8000376:	f000 f9a7 	bl	80006c8 <motorRight_off>
					motorLeft_on();
 800037a:	f000 f9af 	bl	80006dc <motorLeft_on>
					last_action_time = HAL_GetTick();
 800037e:	f000 fb11 	bl	80009a4 <HAL_GetTick>
 8000382:	4603      	mov	r3, r0
 8000384:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <main+0x114>)
 8000386:	6013      	str	r3, [r2, #0]
					state = STATE_3;
 8000388:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <main+0x110>)
 800038a:	2202      	movs	r2, #2
 800038c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800038e:	e029      	b.n	80003e4 <main+0x100>
			}
			case STATE_3:
			{
				if(flagFirstTime ==1)
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <main+0x118>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d107      	bne.n	80003a8 <main+0xc4>
				{
					last_action_time =HAL_GetTick();
 8000398:	f000 fb04 	bl	80009a4 <HAL_GetTick>
 800039c:	4603      	mov	r3, r0
 800039e:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <main+0x114>)
 80003a0:	6013      	str	r3, [r2, #0]
					flagFirstTime = 0;
 80003a2:	4b16      	ldr	r3, [pc, #88]	; (80003fc <main+0x118>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]
				}
				if((current_time - last_action_time)>=(TIME_DURATION))
 80003a8:	4b10      	ldr	r3, [pc, #64]	; (80003ec <main+0x108>)
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <main+0x114>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d916      	bls.n	80003e8 <main+0x104>
				{
					flagFirstTime =1;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <main+0x118>)
 80003bc:	2201      	movs	r2, #1
 80003be:	701a      	strb	r2, [r3, #0]
					led_off();
 80003c0:	f7ff ff86 	bl	80002d0 <led_off>
					pump_off();
 80003c4:	f000 f9a8 	bl	8000718 <pump_off>
					motorRight_off();
 80003c8:	f000 f97e 	bl	80006c8 <motorRight_off>
					motorLeft_off();
 80003cc:	f000 f990 	bl	80006f0 <motorLeft_off>
					last_action_time = 0;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <main+0x114>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
					state = STATE_1;
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <main+0x110>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
					isButton = 0;
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <main+0x10c>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
				}
				break;
 80003e2:	e001      	b.n	80003e8 <main+0x104>
				break;
 80003e4:	bf00      	nop
 80003e6:	e787      	b.n	80002f8 <main+0x14>
				break;
 80003e8:	bf00      	nop
		button_handler();
 80003ea:	e785      	b.n	80002f8 <main+0x14>
 80003ec:	200000a0 	.word	0x200000a0
 80003f0:	20000099 	.word	0x20000099
 80003f4:	20000098 	.word	0x20000098
 80003f8:	2000009c 	.word	0x2000009c
 80003fc:	2000001c 	.word	0x2000001c

08000400 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b096      	sub	sp, #88	; 0x58
 8000404:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800040a:	2228      	movs	r2, #40	; 0x28
 800040c:	2100      	movs	r1, #0
 800040e:	4618      	mov	r0, r3
 8000410:	f002 ffb6 	bl	8003380 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
 8000432:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000434:	2302      	movs	r3, #2
 8000436:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800043c:	2310      	movs	r3, #16
 800043e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000440:	2302      	movs	r3, #2
 8000442:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000444:	2300      	movs	r3, #0
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000448:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800044c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000452:	4618      	mov	r0, r3
 8000454:	f000 fd3a 	bl	8000ecc <HAL_RCC_OscConfig>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x62>
	{
		Error_Handler();
 800045e:	f000 f923 	bl	80006a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	230f      	movs	r3, #15
 8000464:	61fb      	str	r3, [r7, #28]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000466:	2302      	movs	r3, #2
 8000468:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000474:	2300      	movs	r3, #0
 8000476:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000478:	f107 031c 	add.w	r3, r7, #28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fd62 	bl	8001f48 <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x8e>
	{
		Error_Handler();
 800048a:	f000 f90d 	bl	80006a8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800048e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000492:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f001 ff3a 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0xaa>
	{
		Error_Handler();
 80004a6:	f000 f8ff 	bl	80006a8 <Error_Handler>
	}
}
 80004aa:	bf00      	nop
 80004ac:	3758      	adds	r7, #88	; 0x58
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
	...

080004b4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b096      	sub	sp, #88	; 0x58
 80004b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80004c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]
 80004d6:	615a      	str	r2, [r3, #20]
 80004d8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	222c      	movs	r2, #44	; 0x2c
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f002 ff4d 	bl	8003380 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80004e6:	4b3f      	ldr	r3, [pc, #252]	; (80005e4 <MX_TIM1_Init+0x130>)
 80004e8:	4a3f      	ldr	r2, [pc, #252]	; (80005e8 <MX_TIM1_Init+0x134>)
 80004ea:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8;
 80004ec:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <MX_TIM1_Init+0x130>)
 80004ee:	2208      	movs	r2, #8
 80004f0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f2:	4b3c      	ldr	r3, [pc, #240]	; (80005e4 <MX_TIM1_Init+0x130>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 80004f8:	4b3a      	ldr	r3, [pc, #232]	; (80005e4 <MX_TIM1_Init+0x130>)
 80004fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004fe:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000500:	4b38      	ldr	r3, [pc, #224]	; (80005e4 <MX_TIM1_Init+0x130>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000506:	4b37      	ldr	r3, [pc, #220]	; (80005e4 <MX_TIM1_Init+0x130>)
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050c:	4b35      	ldr	r3, [pc, #212]	; (80005e4 <MX_TIM1_Init+0x130>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000512:	4834      	ldr	r0, [pc, #208]	; (80005e4 <MX_TIM1_Init+0x130>)
 8000514:	f002 f824 	bl	8002560 <HAL_TIM_PWM_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0x6e>
	{
		Error_Handler();
 800051e:	f000 f8c3 	bl	80006a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	2300      	movs	r3, #0
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000526:	2300      	movs	r3, #0
 8000528:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052a:	2300      	movs	r3, #0
 800052c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800052e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000532:	4619      	mov	r1, r3
 8000534:	482b      	ldr	r0, [pc, #172]	; (80005e4 <MX_TIM1_Init+0x130>)
 8000536:	f002 fe3d 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM1_Init+0x90>
	{
		Error_Handler();
 8000540:	f000 f8b2 	bl	80006a8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000544:	2360      	movs	r3, #96	; 0x60
 8000546:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 500;
 8000548:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800054c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000552:	2300      	movs	r3, #0
 8000554:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000562:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	481e      	ldr	r0, [pc, #120]	; (80005e4 <MX_TIM1_Init+0x130>)
 800056c:	f002 f9ca 	bl	8002904 <HAL_TIM_PWM_ConfigChannel>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM1_Init+0xc6>
	{
		Error_Handler();
 8000576:	f000 f897 	bl	80006a8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800057a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800057e:	2204      	movs	r2, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4818      	ldr	r0, [pc, #96]	; (80005e4 <MX_TIM1_Init+0x130>)
 8000584:	f002 f9be 	bl	8002904 <HAL_TIM_PWM_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0xde>
	{
		Error_Handler();
 800058e:	f000 f88b 	bl	80006a8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005aa:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4807      	ldr	r0, [pc, #28]	; (80005e4 <MX_TIM1_Init+0x130>)
 80005c8:	f002 fe62 	bl	8003290 <HAL_TIMEx_ConfigBreakDeadTime>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0x122>
	{
		Error_Handler();
 80005d2:	f000 f869 	bl	80006a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <MX_TIM1_Init+0x130>)
 80005d8:	f000 f8ec 	bl	80007b4 <HAL_TIM_MspPostInit>

}
 80005dc:	bf00      	nop
 80005de:	3758      	adds	r7, #88	; 0x58
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000004c 	.word	0x2000004c
 80005e8:	40012c00 	.word	0x40012c00

080005ec <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xb4>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <MX_GPIO_Init+0xb4>)
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	6153      	str	r3, [r2, #20]
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_GPIO_Init+0xb4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_GPIO_Init+0xb4>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xb4>)
 8000620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_GPIO_Init+0xb4>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, PUMP_Pin|LED_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2150      	movs	r1, #80	; 0x50
 8000636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063a:	f000 fc2f 	bl	8000e9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 800063e:	2301      	movs	r3, #1
 8000640:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 fa98 	bl	8000b88 <HAL_GPIO_Init>

	/*Configure GPIO pins : PUMP_Pin LED_Pin */
	GPIO_InitStruct.Pin = PUMP_Pin|LED_Pin;
 8000658:	2350      	movs	r3, #80	; 0x50
 800065a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4619      	mov	r1, r3
 800066e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000672:	f000 fa89 	bl	8000b88 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000676:	23c0      	movs	r3, #192	; 0xc0
 8000678:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000686:	2307      	movs	r3, #7
 8000688:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0xb8>)
 8000692:	f000 fa79 	bl	8000b88 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	48000400 	.word	0x48000400

080006a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <motorRight_on>:
extern TIM_HandleTypeDef htim1;
uint32_t maxduty = 0;
uint32_t duty = 0;

void motorRight_on(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006b8:	2100      	movs	r1, #0
 80006ba:	4802      	ldr	r0, [pc, #8]	; (80006c4 <motorRight_on+0x10>)
 80006bc:	f001 ffa8 	bl	8002610 <HAL_TIM_PWM_Start>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000004c 	.word	0x2000004c

080006c8 <motorRight_off>:

void motorRight_off(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80006cc:	2100      	movs	r1, #0
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <motorRight_off+0x10>)
 80006d0:	f002 f88a 	bl	80027e8 <HAL_TIM_PWM_Stop>
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000004c 	.word	0x2000004c

080006dc <motorLeft_on>:

void motorLeft_on(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006e0:	2104      	movs	r1, #4
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <motorLeft_on+0x10>)
 80006e4:	f001 ff94 	bl	8002610 <HAL_TIM_PWM_Start>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000004c 	.word	0x2000004c

080006f0 <motorLeft_off>:

void motorLeft_off(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80006f4:	2104      	movs	r1, #4
 80006f6:	4802      	ldr	r0, [pc, #8]	; (8000700 <motorLeft_off+0x10>)
 80006f8:	f002 f876 	bl	80027e8 <HAL_TIM_PWM_Stop>
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000004c 	.word	0x2000004c

08000704 <pump_on>:
 */
#include "main.h"
#include "pump.h"

void pump_on(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2110      	movs	r1, #16
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f000 fbc4 	bl	8000e9c <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <pump_off>:

void pump_off(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PUMP_GPIO_Port, PUMP_Pin, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2110      	movs	r1, #16
 8000720:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000724:	f000 fbba 	bl	8000e9c <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <HAL_MspInit+0x44>)
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_MspInit+0x44>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <HAL_MspInit+0x44>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <HAL_MspInit+0x44>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <HAL_MspInit+0x44>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_MspInit+0x44>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_TIM_PWM_MspInit+0x38>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d10b      	bne.n	800079e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <HAL_TIM_PWM_MspInit+0x3c>)
 800078c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	40012c00 	.word	0x40012c00
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <HAL_TIM_MspPostInit+0x68>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d11d      	bne.n	8000812 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_TIM_MspPostInit+0x6c>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a11      	ldr	r2, [pc, #68]	; (8000820 <HAL_TIM_MspPostInit+0x6c>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_TIM_MspPostInit+0x6c>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M_IN1_Pin|M_IN2_Pin;
 80007ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000800:	2306      	movs	r3, #6
 8000802:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	4619      	mov	r1, r3
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f000 f9bb 	bl	8000b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40012c00 	.word	0x40012c00
 8000820:	40021000 	.word	0x40021000

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000870:	f000 f884 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a0:	f7ff ffea 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	; (80008d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	; (80008dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	; (80008e8 <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f002 fd61 	bl	8003390 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ce:	f7ff fd09 	bl	80002e4 <main>

080008d2 <LoopForever>:

LoopForever:
    b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80008e0:	08003428 	.word	0x08003428
  ldr r2, =_sbss
 80008e4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80008e8:	200000a8 	.word	0x200000a8

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x28>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f90d 	bl	8000b20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff ff0e 	bl	800072c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f917 	bl	8000b6e <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 f8ed 	bl	8000b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000020 	.word	0x20000020
 8000974:	20000028 	.word	0x20000028
 8000978:	20000024 	.word	0x20000024

0800097c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000028 	.word	0x20000028
 80009a0:	200000a4 	.word	0x200000a4

080009a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	200000a4 	.word	0x200000a4

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	; (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aec:	d301      	bcc.n	8000af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00f      	b.n	8000b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <SysTick_Config+0x40>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afa:	210f      	movs	r1, #15
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f7ff ff8e 	bl	8000a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <SysTick_Config+0x40>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0a:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <SysTick_Config+0x40>)
 8000b0c:	2207      	movs	r2, #7
 8000b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	e000e010 	.word	0xe000e010

08000b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff47 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b48:	f7ff ff5c 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	6978      	ldr	r0, [r7, #20]
 8000b54:	f7ff ff8e 	bl	8000a74 <NVIC_EncodePriority>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff5d 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b66:	bf00      	nop
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ffb0 	bl	8000adc <SysTick_Config>
 8000b7c:	4603      	mov	r3, r0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e14e      	b.n	8000e36 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8140 	beq.w	8000e30 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d005      	beq.n	8000bc8 <HAL_GPIO_Init+0x40>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d130      	bne.n	8000c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	f003 0201 	and.w	r2, r3, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d017      	beq.n	8000c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d123      	bne.n	8000cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	08da      	lsrs	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	220f      	movs	r2, #15
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	6939      	ldr	r1, [r7, #16]
 8000cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0203 	and.w	r2, r3, #3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 809a 	beq.w	8000e30 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfc:	4b55      	ldr	r3, [pc, #340]	; (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a54      	ldr	r2, [pc, #336]	; (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b52      	ldr	r3, [pc, #328]	; (8000e54 <HAL_GPIO_Init+0x2cc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d14:	4a50      	ldr	r2, [pc, #320]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d3e:	d013      	beq.n	8000d68 <HAL_GPIO_Init+0x1e0>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <HAL_GPIO_Init+0x2d4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d00d      	beq.n	8000d64 <HAL_GPIO_Init+0x1dc>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a45      	ldr	r2, [pc, #276]	; (8000e60 <HAL_GPIO_Init+0x2d8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d007      	beq.n	8000d60 <HAL_GPIO_Init+0x1d8>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <HAL_GPIO_Init+0x2dc>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d101      	bne.n	8000d5c <HAL_GPIO_Init+0x1d4>
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e006      	b.n	8000d6a <HAL_GPIO_Init+0x1e2>
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	e004      	b.n	8000d6a <HAL_GPIO_Init+0x1e2>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e002      	b.n	8000d6a <HAL_GPIO_Init+0x1e2>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e000      	b.n	8000d6a <HAL_GPIO_Init+0x1e2>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	f002 0203 	and.w	r2, r2, #3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d7a:	4937      	ldr	r1, [pc, #220]	; (8000e58 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	3302      	adds	r3, #2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d88:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dac:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db2:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dd6:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e00:	4a19      	ldr	r2, [pc, #100]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_GPIO_Init+0x2e0>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	3301      	adds	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f47f aea9 	bne.w	8000b98 <HAL_GPIO_Init+0x10>
  }
}
 8000e46:	bf00      	nop
 8000e48:	bf00      	nop
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	48000400 	.word	0x48000400
 8000e60:	48000800 	.word	0x48000800
 8000e64:	48000c00 	.word	0x48000c00
 8000e68:	40010400 	.word	0x40010400

08000e6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	460b      	mov	r3, r1
 8000e76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eac:	787b      	ldrb	r3, [r7, #1]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eba:	887a      	ldrh	r2, [r7, #2]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000edc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f001 b823 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 817d 	beq.w	8001202 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f08:	4bbc      	ldr	r3, [pc, #752]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d00c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f14:	4bb9      	ldr	r3, [pc, #740]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d15c      	bne.n	8000fda <HAL_RCC_OscConfig+0x10e>
 8000f20:	4bb6      	ldr	r3, [pc, #728]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2c:	d155      	bne.n	8000fda <HAL_RCC_OscConfig+0x10e>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f32:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <HAL_RCC_OscConfig+0x94>
 8000f5a:	4ba8      	ldr	r3, [pc, #672]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	e015      	b.n	8000f8c <HAL_RCC_OscConfig+0xc0>
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f78:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f7c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f88:	4b9c      	ldr	r3, [pc, #624]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f90:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f94:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f98:	fa92 f2a2 	rbit	r2, r2
 8000f9c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000fa0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fa4:	fab2 f282 	clz	r2, r2
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	f042 0220 	orr.w	r2, r2, #32
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	f002 021f 	and.w	r2, r2, #31
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 811f 	beq.w	8001200 <HAL_RCC_OscConfig+0x334>
 8000fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f040 8116 	bne.w	8001200 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	f000 bfaf 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x12e>
 8000fec:	4b83      	ldr	r3, [pc, #524]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a82      	ldr	r2, [pc, #520]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8000ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	e036      	b.n	8001068 <HAL_RCC_OscConfig+0x19c>
 8000ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x158>
 800100a:	4b7c      	ldr	r3, [pc, #496]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a7b      	ldr	r2, [pc, #492]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	4b79      	ldr	r3, [pc, #484]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a78      	ldr	r2, [pc, #480]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800101c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001020:	6013      	str	r3, [r2, #0]
 8001022:	e021      	b.n	8001068 <HAL_RCC_OscConfig+0x19c>
 8001024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001028:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x184>
 8001036:	4b71      	ldr	r3, [pc, #452]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a70      	ldr	r2, [pc, #448]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b6e      	ldr	r3, [pc, #440]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a6d      	ldr	r2, [pc, #436]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e00b      	b.n	8001068 <HAL_RCC_OscConfig+0x19c>
 8001050:	4b6a      	ldr	r3, [pc, #424]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a69      	ldr	r2, [pc, #420]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b67      	ldr	r3, [pc, #412]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a66      	ldr	r2, [pc, #408]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001066:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001068:	4b64      	ldr	r3, [pc, #400]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	f023 020f 	bic.w	r2, r3, #15
 8001070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	495f      	ldr	r1, [pc, #380]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800107e:	4313      	orrs	r3, r2
 8001080:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001086:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d059      	beq.n	8001146 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001092:	f7ff fc87 	bl	80009a4 <HAL_GetTick>
 8001096:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109a:	e00a      	b.n	80010b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fc82 	bl	80009a4 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b64      	cmp	r3, #100	; 0x64
 80010aa:	d902      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f000 bf43 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
 80010b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010be:	fa93 f3a3 	rbit	r3, r3
 80010c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	095b      	lsrs	r3, r3, #5
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x218>
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e015      	b.n	8001110 <HAL_RCC_OscConfig+0x244>
 80010e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010f0:	fa93 f3a3 	rbit	r3, r3
 80010f4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001100:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001114:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001118:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800111c:	fa92 f2a2 	rbit	r2, r2
 8001120:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001124:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001128:	fab2 f282 	clz	r2, r2
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	f042 0220 	orr.w	r2, r2, #32
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	f002 021f 	and.w	r2, r2, #31
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0ab      	beq.n	800109c <HAL_RCC_OscConfig+0x1d0>
 8001144:	e05d      	b.n	8001202 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fc2d 	bl	80009a4 <HAL_GetTick>
 800114a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114e:	e00a      	b.n	8001166 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fc28 	bl	80009a4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b64      	cmp	r3, #100	; 0x64
 800115e:	d902      	bls.n	8001166 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	f000 bee9 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
 8001166:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001172:	fa93 f3a3 	rbit	r3, r3
 8001176:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800117a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	fab3 f383 	clz	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	095b      	lsrs	r3, r3, #5
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b01      	cmp	r3, #1
 8001190:	d102      	bne.n	8001198 <HAL_RCC_OscConfig+0x2cc>
 8001192:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	e015      	b.n	80011c4 <HAL_RCC_OscConfig+0x2f8>
 8001198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011c0:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_RCC_OscConfig+0x330>)
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011c8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011cc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011d0:	fa92 f2a2 	rbit	r2, r2
 80011d4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011d8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011dc:	fab2 f282 	clz	r2, r2
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	f042 0220 	orr.w	r2, r2, #32
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	f002 021f 	and.w	r2, r2, #31
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1ab      	bne.n	8001150 <HAL_RCC_OscConfig+0x284>
 80011f8:	e003      	b.n	8001202 <HAL_RCC_OscConfig+0x336>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 817d 	beq.w	8001512 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001218:	4ba6      	ldr	r3, [pc, #664]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001224:	4ba3      	ldr	r3, [pc, #652]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d172      	bne.n	8001316 <HAL_RCC_OscConfig+0x44a>
 8001230:	4ba0      	ldr	r3, [pc, #640]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d16c      	bne.n	8001316 <HAL_RCC_OscConfig+0x44a>
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001242:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001246:	fa93 f3a3 	rbit	r3, r3
 800124a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800124e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	b2db      	uxtb	r3, r3
 8001258:	095b      	lsrs	r3, r3, #5
 800125a:	b2db      	uxtb	r3, r3
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b01      	cmp	r3, #1
 8001264:	d102      	bne.n	800126c <HAL_RCC_OscConfig+0x3a0>
 8001266:	4b93      	ldr	r3, [pc, #588]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	e013      	b.n	8001294 <HAL_RCC_OscConfig+0x3c8>
 800126c:	2302      	movs	r3, #2
 800126e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001272:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001276:	fa93 f3a3 	rbit	r3, r3
 800127a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001284:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001288:	fa93 f3a3 	rbit	r3, r3
 800128c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001290:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	2202      	movs	r2, #2
 8001296:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800129a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800129e:	fa92 f2a2 	rbit	r2, r2
 80012a2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012aa:	fab2 f282 	clz	r2, r2
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f042 0220 	orr.w	r2, r2, #32
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	f002 021f 	and.w	r2, r2, #31
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00a      	beq.n	80012dc <HAL_RCC_OscConfig+0x410>
 80012c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d002      	beq.n	80012dc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	f000 be2e 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b75      	ldr	r3, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	21f8      	movs	r1, #248	; 0xf8
 80012f2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012fa:	fa91 f1a1 	rbit	r1, r1
 80012fe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001302:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001306:	fab1 f181 	clz	r1, r1
 800130a:	b2c9      	uxtb	r1, r1
 800130c:	408b      	lsls	r3, r1
 800130e:	4969      	ldr	r1, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001314:	e0fd      	b.n	8001512 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8088 	beq.w	8001438 <HAL_RCC_OscConfig+0x56c>
 8001328:	2301      	movs	r3, #1
 800132a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800133a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001348:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	461a      	mov	r2, r3
 8001350:	2301      	movs	r3, #1
 8001352:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fb26 	bl	80009a4 <HAL_GetTick>
 8001358:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135c:	e00a      	b.n	8001374 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff fb21 	bl	80009a4 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d902      	bls.n	8001374 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	f000 bde2 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001386:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	fab3 f383 	clz	r3, r3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	095b      	lsrs	r3, r3, #5
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b01      	cmp	r3, #1
 800139c:	d102      	bne.n	80013a4 <HAL_RCC_OscConfig+0x4d8>
 800139e:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	e013      	b.n	80013cc <HAL_RCC_OscConfig+0x500>
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013c8:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	2202      	movs	r2, #2
 80013ce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013d2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013d6:	fa92 f2a2 	rbit	r2, r2
 80013da:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013de:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013e2:	fab2 f282 	clz	r2, r2
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	f042 0220 	orr.w	r2, r2, #32
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	f002 021f 	and.w	r2, r2, #31
 80013f2:	2101      	movs	r1, #1
 80013f4:	fa01 f202 	lsl.w	r2, r1, r2
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0af      	beq.n	800135e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	21f8      	movs	r1, #248	; 0xf8
 8001414:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800141c:	fa91 f1a1 	rbit	r1, r1
 8001420:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001424:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001428:	fab1 f181 	clz	r1, r1
 800142c:	b2c9      	uxtb	r1, r1
 800142e:	408b      	lsls	r3, r1
 8001430:	4920      	ldr	r1, [pc, #128]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
 8001436:	e06c      	b.n	8001512 <HAL_RCC_OscConfig+0x646>
 8001438:	2301      	movs	r3, #1
 800143a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001442:	fa93 f3a3 	rbit	r3, r3
 8001446:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800144a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001458:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	461a      	mov	r2, r3
 8001460:	2300      	movs	r3, #0
 8001462:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fa9e 	bl	80009a4 <HAL_GetTick>
 8001468:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fa99 	bl	80009a4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d902      	bls.n	8001484 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	f000 bd5a 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	095b      	lsrs	r3, r3, #5
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d104      	bne.n	80014b8 <HAL_RCC_OscConfig+0x5ec>
 80014ae:	4b01      	ldr	r3, [pc, #4]	; (80014b4 <HAL_RCC_OscConfig+0x5e8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	e015      	b.n	80014e0 <HAL_RCC_OscConfig+0x614>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	2302      	movs	r3, #2
 80014ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014c2:	fa93 f3a3 	rbit	r3, r3
 80014c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014ca:	2302      	movs	r3, #2
 80014cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d4:	fa93 f3a3 	rbit	r3, r3
 80014d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014dc:	4bc8      	ldr	r3, [pc, #800]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	2202      	movs	r2, #2
 80014e2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014e6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ea:	fa92 f2a2 	rbit	r2, r2
 80014ee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014f6:	fab2 f282 	clz	r2, r2
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	f042 0220 	orr.w	r2, r2, #32
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	f002 021f 	and.w	r2, r2, #31
 8001506:	2101      	movs	r1, #1
 8001508:	fa01 f202 	lsl.w	r2, r1, r2
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ad      	bne.n	800146e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001516:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 8110 	beq.w	8001748 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d079      	beq.n	800162c <HAL_RCC_OscConfig+0x760>
 8001538:	2301      	movs	r3, #1
 800153a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800154a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	4bab      	ldr	r3, [pc, #684]	; (8001804 <HAL_RCC_OscConfig+0x938>)
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	2301      	movs	r3, #1
 8001560:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fa1f 	bl	80009a4 <HAL_GetTick>
 8001566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156c:	f7ff fa1a 	bl	80009a4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d902      	bls.n	8001582 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	f000 bcdb 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
 8001582:	2302      	movs	r3, #2
 8001584:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800158c:	fa93 f3a3 	rbit	r3, r3
 8001590:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015dc:	4b88      	ldr	r3, [pc, #544]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 80015de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015e8:	2102      	movs	r1, #2
 80015ea:	6019      	str	r1, [r3, #0]
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fa93 f1a3 	rbit	r1, r3
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001602:	6019      	str	r1, [r3, #0]
  return result;
 8001604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001608:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	2101      	movs	r1, #1
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0a0      	beq.n	800156c <HAL_RCC_OscConfig+0x6a0>
 800162a:	e08d      	b.n	8001748 <HAL_RCC_OscConfig+0x87c>
 800162c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001630:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	fa93 f2a3 	rbit	r2, r3
 8001646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800164e:	601a      	str	r2, [r3, #0]
  return result;
 8001650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001654:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001658:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	4b68      	ldr	r3, [pc, #416]	; (8001804 <HAL_RCC_OscConfig+0x938>)
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	2300      	movs	r3, #0
 800166c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166e:	f7ff f999 	bl	80009a4 <HAL_GetTick>
 8001672:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001678:	f7ff f994 	bl	80009a4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d902      	bls.n	800168e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	f000 bc55 	b.w	8001f38 <HAL_RCC_OscConfig+0x106c>
 800168e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001692:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	fa93 f2a3 	rbit	r2, r3
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ba:	2202      	movs	r2, #2
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	fa93 f2a3 	rbit	r2, r3
 80016cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	fa93 f2a3 	rbit	r2, r3
 80016f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016f8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fa:	4b41      	ldr	r3, [pc, #260]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 80016fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001702:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001706:	2102      	movs	r1, #2
 8001708:	6019      	str	r1, [r3, #0]
 800170a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800170e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	fa93 f1a3 	rbit	r1, r3
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001720:	6019      	str	r1, [r3, #0]
  return result;
 8001722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001726:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	fab3 f383 	clz	r3, r3
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	2101      	movs	r1, #1
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	4013      	ands	r3, r2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d197      	bne.n	8001678 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 81a1 	beq.w	8001aa0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d116      	bne.n	800179e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001770:	4b23      	ldr	r3, [pc, #140]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	4a22      	ldr	r2, [pc, #136]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 8001776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177a:	61d3      	str	r3, [r2, #28]
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001792:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001796:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <HAL_RCC_OscConfig+0x93c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d11a      	bne.n	80017e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_OscConfig+0x93c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a16      	ldr	r2, [pc, #88]	; (8001808 <HAL_RCC_OscConfig+0x93c>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff f8f5 	bl	80009a4 <HAL_GetTick>
 80017ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	e009      	b.n	80017d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c0:	f7ff f8f0 	bl	80009a4 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b64      	cmp	r3, #100	; 0x64
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e3b1      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x93c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0ef      	beq.n	80017c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d10d      	bne.n	800180c <HAL_RCC_OscConfig+0x940>
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a02      	ldr	r2, [pc, #8]	; (8001800 <HAL_RCC_OscConfig+0x934>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6213      	str	r3, [r2, #32]
 80017fc:	e03c      	b.n	8001878 <HAL_RCC_OscConfig+0x9ac>
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	10908120 	.word	0x10908120
 8001808:	40007000 	.word	0x40007000
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10c      	bne.n	8001836 <HAL_RCC_OscConfig+0x96a>
 800181c:	4bc1      	ldr	r3, [pc, #772]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4ac0      	ldr	r2, [pc, #768]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	4bbe      	ldr	r3, [pc, #760]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4abd      	ldr	r2, [pc, #756]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 800182e:	f023 0304 	bic.w	r3, r3, #4
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	e020      	b.n	8001878 <HAL_RCC_OscConfig+0x9ac>
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b05      	cmp	r3, #5
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x994>
 8001846:	4bb7      	ldr	r3, [pc, #732]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4ab6      	ldr	r2, [pc, #728]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	4bb4      	ldr	r3, [pc, #720]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4ab3      	ldr	r2, [pc, #716]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0x9ac>
 8001860:	4bb0      	ldr	r3, [pc, #704]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4aaf      	ldr	r2, [pc, #700]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	4bad      	ldr	r3, [pc, #692]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4aac      	ldr	r2, [pc, #688]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001872:	f023 0304 	bic.w	r3, r3, #4
 8001876:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 8081 	beq.w	800198c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff f88b 	bl	80009a4 <HAL_GetTick>
 800188e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff f886 	bl	80009a4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e345      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018b4:	2202      	movs	r2, #2
 80018b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018d8:	2202      	movs	r2, #2
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	fa93 f2a3 	rbit	r2, r3
 80018ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018f2:	601a      	str	r2, [r3, #0]
  return result;
 80018f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	095b      	lsrs	r3, r3, #5
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0xa4c>
 8001912:	4b84      	ldr	r3, [pc, #528]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	e013      	b.n	8001940 <HAL_RCC_OscConfig+0xa74>
 8001918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001920:	2202      	movs	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001928:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	fa93 f2a3 	rbit	r2, r3
 8001932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001936:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	4b79      	ldr	r3, [pc, #484]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001944:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001948:	2102      	movs	r1, #2
 800194a:	6011      	str	r1, [r2, #0]
 800194c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001950:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	fa92 f1a2 	rbit	r1, r2
 800195a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800195e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001962:	6011      	str	r1, [r2, #0]
  return result;
 8001964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001968:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	fab2 f282 	clz	r2, r2
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	f002 021f 	and.w	r2, r2, #31
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	4013      	ands	r3, r2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d084      	beq.n	8001894 <HAL_RCC_OscConfig+0x9c8>
 800198a:	e07f      	b.n	8001a8c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff f80a 	bl	80009a4 <HAL_GetTick>
 8001990:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001996:	f7ff f805 	bl	80009a4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e2c4      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
 80019ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	fa93 f2a3 	rbit	r2, r3
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019da:	2202      	movs	r2, #2
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	fa93 f2a3 	rbit	r2, r3
 80019ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	fab3 f383 	clz	r3, r3
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0xb4e>
 8001a14:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	e013      	b.n	8001a42 <HAL_RCC_OscConfig+0xb76>
 8001a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a46:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	6011      	str	r1, [r2, #0]
 8001a4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	fa92 f1a2 	rbit	r1, r2
 8001a5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a60:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a64:	6011      	str	r1, [r2, #0]
  return result;
 8001a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	fab2 f282 	clz	r2, r2
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	f002 021f 	and.w	r2, r2, #31
 8001a80:	2101      	movs	r1, #1
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d184      	bne.n	8001996 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a8c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	4a22      	ldr	r2, [pc, #136]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8242 	beq.w	8001f36 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <HAL_RCC_OscConfig+0xc58>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	f000 8213 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	f040 8162 	bne.w	8001d96 <HAL_RCC_OscConfig+0xeca>
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ada:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ade:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	fa93 f2a3 	rbit	r2, r3
 8001aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001af6:	601a      	str	r2, [r3, #0]
  return result;
 8001af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001afc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b00:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	461a      	mov	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b18:	f7fe ff44 	bl	80009a4 <HAL_GetTick>
 8001b1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b20:	e00c      	b.n	8001b3c <HAL_RCC_OscConfig+0xc70>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7fe ff3c 	bl	80009a4 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1fd      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
 8001b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b40:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	fa93 f2a3 	rbit	r2, r3
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b60:	601a      	str	r2, [r3, #0]
  return result;
 8001b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b66:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	fab3 f383 	clz	r3, r3
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_OscConfig+0xcba>
 8001b80:	4bb0      	ldr	r3, [pc, #704]	; (8001e44 <HAL_RCC_OscConfig+0xf78>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	e027      	b.n	8001bd6 <HAL_RCC_OscConfig+0xd0a>
 8001b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b98:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	fa93 f2a3 	rbit	r2, r3
 8001ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bbe:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bcc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	4b9c      	ldr	r3, [pc, #624]	; (8001e44 <HAL_RCC_OscConfig+0xf78>)
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bda:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bde:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be2:	6011      	str	r1, [r2, #0]
 8001be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bec:	6812      	ldr	r2, [r2, #0]
 8001bee:	fa92 f1a2 	rbit	r1, r2
 8001bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bf6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bfa:	6011      	str	r1, [r2, #0]
  return result;
 8001bfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c00:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	fab2 f282 	clz	r2, r2
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f042 0220 	orr.w	r2, r2, #32
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f002 021f 	and.w	r2, r2, #31
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d182      	bne.n	8001b28 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0xf78>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	430b      	orrs	r3, r1
 8001c44:	497f      	ldr	r1, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0xf78>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f2a3 	rbit	r2, r3
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c6e:	601a      	str	r2, [r3, #0]
  return result;
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c78:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe fe88 	bl	80009a4 <HAL_GetTick>
 8001c94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c98:	e009      	b.n	8001cae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe fe83 	bl	80009a4 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e144      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	fa93 f2a3 	rbit	r2, r3
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cd2:	601a      	str	r2, [r3, #0]
  return result;
 8001cd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cdc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	095b      	lsrs	r3, r3, #5
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d102      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xe2c>
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_RCC_OscConfig+0xf78>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	e027      	b.n	8001d48 <HAL_RCC_OscConfig+0xe7c>
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	fa93 f2a3 	rbit	r2, r3
 8001d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d18:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d22:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f2a3 	rbit	r2, r3
 8001d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d3e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b3f      	ldr	r3, [pc, #252]	; (8001e44 <HAL_RCC_OscConfig+0xf78>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d4c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d54:	6011      	str	r1, [r2, #0]
 8001d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fa92 f1a2 	rbit	r1, r2
 8001d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d68:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d6c:	6011      	str	r1, [r2, #0]
  return result;
 8001d6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	f002 021f 	and.w	r2, r2, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d082      	beq.n	8001c9a <HAL_RCC_OscConfig+0xdce>
 8001d94:	e0cf      	b.n	8001f36 <HAL_RCC_OscConfig+0x106a>
 8001d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dba:	601a      	str	r2, [r3, #0]
  return result;
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dc4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7fe fde2 	bl	80009a4 <HAL_GetTick>
 8001de0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de4:	e009      	b.n	8001dfa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe fddd 	bl	80009a4 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e09e      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
 8001dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dfe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e0c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	fa93 f2a3 	rbit	r2, r3
 8001e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e1e:	601a      	str	r2, [r3, #0]
  return result;
 8001e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	fab3 f383 	clz	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d104      	bne.n	8001e48 <HAL_RCC_OscConfig+0xf7c>
 8001e3e:	4b01      	ldr	r3, [pc, #4]	; (8001e44 <HAL_RCC_OscConfig+0xf78>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e029      	b.n	8001e98 <HAL_RCC_OscConfig+0xfcc>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	fa93 f2a3 	rbit	r2, r3
 8001e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e68:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e72:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e80:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e8e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_OscConfig+0x1078>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e9c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ea0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ea4:	6011      	str	r1, [r2, #0]
 8001ea6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eaa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	fa92 f1a2 	rbit	r1, r2
 8001eb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eb8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ebc:	6011      	str	r1, [r2, #0]
  return result;
 8001ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	fab2 f282 	clz	r2, r2
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	f042 0220 	orr.w	r2, r2, #32
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	f002 021f 	and.w	r2, r2, #31
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f202 	lsl.w	r2, r1, r2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d180      	bne.n	8001de6 <HAL_RCC_OscConfig+0xf1a>
 8001ee4:	e027      	b.n	8001f36 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e01e      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_RCC_OscConfig+0x1078>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d10b      	bne.n	8001f32 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b09e      	sub	sp, #120	; 0x78
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e162      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b90      	ldr	r3, [pc, #576]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b8d      	ldr	r3, [pc, #564]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 0207 	bic.w	r2, r3, #7
 8001f76:	498b      	ldr	r1, [pc, #556]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e14a      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b82      	ldr	r3, [pc, #520]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	497f      	ldr	r1, [pc, #508]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80dc 	beq.w	8002174 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d13c      	bne.n	800203e <HAL_RCC_ClockConfig+0xf6>
 8001fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd4:	fab3 f383 	clz	r3, r3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_RCC_ClockConfig+0xa6>
 8001fe8:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	e00f      	b.n	800200e <HAL_RCC_ClockConfig+0xc6>
 8001fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	667b      	str	r3, [r7, #100]	; 0x64
 8001ffc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002000:	663b      	str	r3, [r7, #96]	; 0x60
 8002002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002012:	65ba      	str	r2, [r7, #88]	; 0x58
 8002014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002016:	fa92 f2a2 	rbit	r2, r2
 800201a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800201c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800201e:	fab2 f282 	clz	r2, r2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f042 0220 	orr.w	r2, r2, #32
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f002 021f 	and.w	r2, r2, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d17b      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0f3      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d13c      	bne.n	80020c0 <HAL_RCC_ClockConfig+0x178>
 8002046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_RCC_ClockConfig+0x128>
 800206a:	4b4f      	ldr	r3, [pc, #316]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	e00f      	b.n	8002090 <HAL_RCC_ClockConfig+0x148>
 8002070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	647b      	str	r3, [r7, #68]	; 0x44
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	643b      	str	r3, [r7, #64]	; 0x40
 8002084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002094:	63ba      	str	r2, [r7, #56]	; 0x38
 8002096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800209e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0220 	orr.w	r2, r2, #32
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d13a      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0b2      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
 80020c0:	2302      	movs	r3, #2
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	095b      	lsrs	r3, r3, #5
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d102      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x1a0>
 80020e2:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e00d      	b.n	8002104 <HAL_RCC_ClockConfig+0x1bc>
 80020e8:	2302      	movs	r3, #2
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
 80020f4:	2302      	movs	r3, #2
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	2202      	movs	r2, #2
 8002106:	61ba      	str	r2, [r7, #24]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	fa92 f2a2 	rbit	r2, r2
 800210e:	617a      	str	r2, [r7, #20]
  return result;
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	fab2 f282 	clz	r2, r2
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	f042 0220 	orr.w	r2, r2, #32
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	f002 021f 	and.w	r2, r2, #31
 8002122:	2101      	movs	r1, #1
 8002124:	fa01 f202 	lsl.w	r2, r1, r2
 8002128:	4013      	ands	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e079      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	491a      	ldr	r1, [pc, #104]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7fe fc2e 	bl	80009a4 <HAL_GetTick>
 8002148:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7fe fc2a 	bl	80009a4 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e061      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_ClockConfig+0x260>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d214      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	4906      	ldr	r1, [pc, #24]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <HAL_RCC_ClockConfig+0x25c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e040      	b.n	8002226 <HAL_RCC_ClockConfig+0x2de>
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	491a      	ldr	r1, [pc, #104]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4912      	ldr	r1, [pc, #72]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ea:	f000 f829 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021ee:	4601      	mov	r1, r0
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <HAL_RCC_ClockConfig+0x2e8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f8:	22f0      	movs	r2, #240	; 0xf0
 80021fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	fa92 f2a2 	rbit	r2, r2
 8002202:	60fa      	str	r2, [r7, #12]
  return result;
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	40d3      	lsrs	r3, r2
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x2ec>)
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	fa21 f303 	lsr.w	r3, r1, r3
 8002216:	4a08      	ldr	r2, [pc, #32]	; (8002238 <HAL_RCC_ClockConfig+0x2f0>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800221a:	4b08      	ldr	r3, [pc, #32]	; (800223c <HAL_RCC_ClockConfig+0x2f4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fb7c 	bl	800091c <HAL_InitTick>
  
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3778      	adds	r7, #120	; 0x78
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40021000 	.word	0x40021000
 8002234:	080033f0 	.word	0x080033f0
 8002238:	20000020 	.word	0x20000020
 800223c:	20000024 	.word	0x20000024

08002240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	; 0x2c
 8002244:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc0>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b04      	cmp	r3, #4
 8002268:	d002      	beq.n	8002270 <HAL_RCC_GetSysClockFreq+0x30>
 800226a:	2b08      	cmp	r3, #8
 800226c:	d003      	beq.n	8002276 <HAL_RCC_GetSysClockFreq+0x36>
 800226e:	e03c      	b.n	80022ea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002272:	623b      	str	r3, [r7, #32]
      break;
 8002274:	e03c      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800227c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002280:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	607a      	str	r2, [r7, #4]
  return result;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	fab2 f282 	clz	r2, r2
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	40d3      	lsrs	r3, r2
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800229a:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_RCC_GetSysClockFreq+0xc0>)
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	220f      	movs	r2, #15
 80022a4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	60fa      	str	r2, [r7, #12]
  return result;
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	40d3      	lsrs	r3, r2
 80022b8:	4a14      	ldr	r2, [pc, #80]	; (800230c <HAL_RCC_GetSysClockFreq+0xcc>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022c8:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	e004      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	623b      	str	r3, [r7, #32]
      break;
 80022e8:	e002      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ec:	623b      	str	r3, [r7, #32]
      break;
 80022ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f0:	6a3b      	ldr	r3, [r7, #32]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	372c      	adds	r7, #44	; 0x2c
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000
 8002304:	007a1200 	.word	0x007a1200
 8002308:	08003400 	.word	0x08003400
 800230c:	08003410 	.word	0x08003410
 8002310:	003d0900 	.word	0x003d0900

08002314 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b092      	sub	sp, #72	; 0x48
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80cd 	beq.w	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002338:	4b86      	ldr	r3, [pc, #536]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10e      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b83      	ldr	r3, [pc, #524]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a82      	ldr	r2, [pc, #520]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	61d3      	str	r3, [r2, #28]
 8002350:	4b80      	ldr	r3, [pc, #512]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a79      	ldr	r2, [pc, #484]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe fb13 	bl	80009a4 <HAL_GetTick>
 800237e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe fb0f 	bl	80009a4 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0db      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b70      	ldr	r3, [pc, #448]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a0:	4b6c      	ldr	r3, [pc, #432]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d07d      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x198>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d076      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023be:	4b65      	ldr	r3, [pc, #404]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023cc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	4b5e      	ldr	r3, [pc, #376]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	461a      	mov	r2, r3
 80023e8:	2301      	movs	r3, #1
 80023ea:	6013      	str	r3, [r2, #0]
 80023ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fc:	fab3 f383 	clz	r3, r3
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4b55      	ldr	r3, [pc, #340]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	461a      	mov	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002410:	4a50      	ldr	r2, [pc, #320]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002414:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d045      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fac0 	bl	80009a4 <HAL_GetTick>
 8002424:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	e00a      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7fe fabc 	bl	80009a4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e086      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800243e:	2302      	movs	r3, #2
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	2302      	movs	r3, #2
 800244c:	623b      	str	r3, [r7, #32]
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	61fb      	str	r3, [r7, #28]
  return result;
 8002456:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	fab3 f383 	clz	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d102      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	e007      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002472:	2302      	movs	r3, #2
 8002474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	4b35      	ldr	r3, [pc, #212]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2202      	movs	r2, #2
 8002484:	613a      	str	r2, [r7, #16]
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	fa92 f2a2 	rbit	r2, r2
 800248c:	60fa      	str	r2, [r7, #12]
  return result;
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0bd      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024ac:	4b29      	ldr	r3, [pc, #164]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	4926      	ldr	r1, [pc, #152]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a22      	ldr	r2, [pc, #136]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	491a      	ldr	r1, [pc, #104]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0320 	and.w	r3, r3, #32
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f023 0210 	bic.w	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	4912      	ldr	r1, [pc, #72]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800250a:	4313      	orrs	r3, r2
 800250c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002516:	2b00      	cmp	r3, #0
 8002518:	d008      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	490b      	ldr	r1, [pc, #44]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002528:	4313      	orrs	r3, r2
 800252a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	4903      	ldr	r1, [pc, #12]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002546:	4313      	orrs	r3, r2
 8002548:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3748      	adds	r7, #72	; 0x48
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000
 8002558:	40007000 	.word	0x40007000
 800255c:	10908100 	.word	0x10908100

08002560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e049      	b.n	8002606 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe f8f4 	bl	8000774 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 fac4 	bl	8002b2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_TIM_PWM_Start+0x24>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	bf14      	ite	ne
 800262c:	2301      	movne	r3, #1
 800262e:	2300      	moveq	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	e03c      	b.n	80026ae <HAL_TIM_PWM_Start+0x9e>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b04      	cmp	r3, #4
 8002638:	d109      	bne.n	800264e <HAL_TIM_PWM_Start+0x3e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	e02f      	b.n	80026ae <HAL_TIM_PWM_Start+0x9e>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d109      	bne.n	8002668 <HAL_TIM_PWM_Start+0x58>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e022      	b.n	80026ae <HAL_TIM_PWM_Start+0x9e>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	d109      	bne.n	8002682 <HAL_TIM_PWM_Start+0x72>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e015      	b.n	80026ae <HAL_TIM_PWM_Start+0x9e>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b10      	cmp	r3, #16
 8002686:	d109      	bne.n	800269c <HAL_TIM_PWM_Start+0x8c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e008      	b.n	80026ae <HAL_TIM_PWM_Start+0x9e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e088      	b.n	80027c8 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0xb6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	e023      	b.n	800270e <HAL_TIM_PWM_Start+0xfe>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0xc6>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	e01b      	b.n	800270e <HAL_TIM_PWM_Start+0xfe>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xd6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e4:	e013      	b.n	800270e <HAL_TIM_PWM_Start+0xfe>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b0c      	cmp	r3, #12
 80026ea:	d104      	bne.n	80026f6 <HAL_TIM_PWM_Start+0xe6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026f4:	e00b      	b.n	800270e <HAL_TIM_PWM_Start+0xfe>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d104      	bne.n	8002706 <HAL_TIM_PWM_Start+0xf6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002704:	e003      	b.n	800270e <HAL_TIM_PWM_Start+0xfe>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f000 fd26 	bl	8003168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <HAL_TIM_PWM_Start+0x1c0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00e      	beq.n	8002744 <HAL_TIM_PWM_Start+0x134>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a2a      	ldr	r2, [pc, #168]	; (80027d4 <HAL_TIM_PWM_Start+0x1c4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d009      	beq.n	8002744 <HAL_TIM_PWM_Start+0x134>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <HAL_TIM_PWM_Start+0x1c8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d004      	beq.n	8002744 <HAL_TIM_PWM_Start+0x134>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_TIM_PWM_Start+0x1cc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d101      	bne.n	8002748 <HAL_TIM_PWM_Start+0x138>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <HAL_TIM_PWM_Start+0x13a>
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_TIM_PWM_Start+0x1c0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_TIM_PWM_Start+0x176>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d009      	beq.n	8002786 <HAL_TIM_PWM_Start+0x176>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_TIM_PWM_Start+0x1d0>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIM_PWM_Start+0x176>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIM_PWM_Start+0x1c4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d115      	bne.n	80027b2 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_TIM_PWM_Start+0x1d4>)
 800278e:	4013      	ands	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b06      	cmp	r3, #6
 8002796:	d015      	beq.n	80027c4 <HAL_TIM_PWM_Start+0x1b4>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d011      	beq.n	80027c4 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b0:	e008      	b.n	80027c4 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e000      	b.n	80027c6 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40014000 	.word	0x40014000
 80027d8:	40014400 	.word	0x40014400
 80027dc:	40014800 	.word	0x40014800
 80027e0:	40000400 	.word	0x40000400
 80027e4:	00010007 	.word	0x00010007

080027e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2200      	movs	r2, #0
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fcb4 	bl	8003168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <HAL_TIM_PWM_Stop+0x10c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00e      	beq.n	8002828 <HAL_TIM_PWM_Stop+0x40>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <HAL_TIM_PWM_Stop+0x110>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_TIM_PWM_Stop+0x40>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a38      	ldr	r2, [pc, #224]	; (80028fc <HAL_TIM_PWM_Stop+0x114>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_TIM_PWM_Stop+0x40>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a37      	ldr	r2, [pc, #220]	; (8002900 <HAL_TIM_PWM_Stop+0x118>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d101      	bne.n	800282c <HAL_TIM_PWM_Stop+0x44>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <HAL_TIM_PWM_Stop+0x46>
 800282c:	2300      	movs	r3, #0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d017      	beq.n	8002862 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a1a      	ldr	r2, [r3, #32]
 8002838:	f241 1311 	movw	r3, #4369	; 0x1111
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_TIM_PWM_Stop+0x7a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a1a      	ldr	r2, [r3, #32]
 8002848:	f240 4344 	movw	r3, #1092	; 0x444
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d107      	bne.n	8002862 <HAL_TIM_PWM_Stop+0x7a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6a1a      	ldr	r2, [r3, #32]
 8002868:	f241 1311 	movw	r3, #4369	; 0x1111
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10f      	bne.n	8002892 <HAL_TIM_PWM_Stop+0xaa>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a1a      	ldr	r2, [r3, #32]
 8002878:	f240 4344 	movw	r3, #1092	; 0x444
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d107      	bne.n	8002892 <HAL_TIM_PWM_Stop+0xaa>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <HAL_TIM_PWM_Stop+0xba>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a0:	e023      	b.n	80028ea <HAL_TIM_PWM_Stop+0x102>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d104      	bne.n	80028b2 <HAL_TIM_PWM_Stop+0xca>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b0:	e01b      	b.n	80028ea <HAL_TIM_PWM_Stop+0x102>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d104      	bne.n	80028c2 <HAL_TIM_PWM_Stop+0xda>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c0:	e013      	b.n	80028ea <HAL_TIM_PWM_Stop+0x102>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b0c      	cmp	r3, #12
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_PWM_Stop+0xea>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028d0:	e00b      	b.n	80028ea <HAL_TIM_PWM_Stop+0x102>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_PWM_Stop+0xfa>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e0:	e003      	b.n	80028ea <HAL_TIM_PWM_Stop+0x102>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40014000 	.word	0x40014000
 80028fc:	40014400 	.word	0x40014400
 8002900:	40014800 	.word	0x40014800

08002904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800291e:	2302      	movs	r3, #2
 8002920:	e0ff      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b14      	cmp	r3, #20
 800292e:	f200 80f0 	bhi.w	8002b12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002932:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002938:	0800298d 	.word	0x0800298d
 800293c:	08002b13 	.word	0x08002b13
 8002940:	08002b13 	.word	0x08002b13
 8002944:	08002b13 	.word	0x08002b13
 8002948:	080029cd 	.word	0x080029cd
 800294c:	08002b13 	.word	0x08002b13
 8002950:	08002b13 	.word	0x08002b13
 8002954:	08002b13 	.word	0x08002b13
 8002958:	08002a0f 	.word	0x08002a0f
 800295c:	08002b13 	.word	0x08002b13
 8002960:	08002b13 	.word	0x08002b13
 8002964:	08002b13 	.word	0x08002b13
 8002968:	08002a4f 	.word	0x08002a4f
 800296c:	08002b13 	.word	0x08002b13
 8002970:	08002b13 	.word	0x08002b13
 8002974:	08002b13 	.word	0x08002b13
 8002978:	08002a91 	.word	0x08002a91
 800297c:	08002b13 	.word	0x08002b13
 8002980:	08002b13 	.word	0x08002b13
 8002984:	08002b13 	.word	0x08002b13
 8002988:	08002ad1 	.word	0x08002ad1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f942 	bl	8002c1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0208 	orr.w	r2, r2, #8
 80029a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6999      	ldr	r1, [r3, #24]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	619a      	str	r2, [r3, #24]
      break;
 80029ca:	e0a5      	b.n	8002b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f9a8 	bl	8002d28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6999      	ldr	r1, [r3, #24]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	021a      	lsls	r2, r3, #8
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	619a      	str	r2, [r3, #24]
      break;
 8002a0c:	e084      	b.n	8002b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f000 fa07 	bl	8002e28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0208 	orr.w	r2, r2, #8
 8002a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69da      	ldr	r2, [r3, #28]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0204 	bic.w	r2, r2, #4
 8002a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69d9      	ldr	r1, [r3, #28]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
      break;
 8002a4c:	e064      	b.n	8002b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fa65 	bl	8002f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69da      	ldr	r2, [r3, #28]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	69d9      	ldr	r1, [r3, #28]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	021a      	lsls	r2, r3, #8
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	61da      	str	r2, [r3, #28]
      break;
 8002a8e:	e043      	b.n	8002b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 faa8 	bl	8002fec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0208 	orr.w	r2, r2, #8
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0204 	bic.w	r2, r2, #4
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002ace:	e023      	b.n	8002b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fae6 	bl	80030a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	021a      	lsls	r2, r3, #8
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002b10:	e002      	b.n	8002b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
      break;
 8002b16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop

08002b2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a32      	ldr	r2, [pc, #200]	; (8002c08 <TIM_Base_SetConfig+0xdc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <TIM_Base_SetConfig+0x28>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4a:	d003      	beq.n	8002b54 <TIM_Base_SetConfig+0x28>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <TIM_Base_SetConfig+0xe0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d108      	bne.n	8002b66 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a27      	ldr	r2, [pc, #156]	; (8002c08 <TIM_Base_SetConfig+0xdc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <TIM_Base_SetConfig+0x6a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d00f      	beq.n	8002b96 <TIM_Base_SetConfig+0x6a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a24      	ldr	r2, [pc, #144]	; (8002c0c <TIM_Base_SetConfig+0xe0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_Base_SetConfig+0x6a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a23      	ldr	r2, [pc, #140]	; (8002c10 <TIM_Base_SetConfig+0xe4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0x6a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <TIM_Base_SetConfig+0xe8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0x6a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <TIM_Base_SetConfig+0xec>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <TIM_Base_SetConfig+0xdc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00b      	beq.n	8002bec <TIM_Base_SetConfig+0xc0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <TIM_Base_SetConfig+0xe4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <TIM_Base_SetConfig+0xc0>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <TIM_Base_SetConfig+0xe8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <TIM_Base_SetConfig+0xc0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <TIM_Base_SetConfig+0xec>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d103      	bne.n	8002bf4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	615a      	str	r2, [r3, #20]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800

08002c1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0201 	bic.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f023 0302 	bic.w	r3, r3, #2
 8002c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <TIM_OC1_SetConfig+0xfc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00b      	beq.n	8002c94 <TIM_OC1_SetConfig+0x78>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a27      	ldr	r2, [pc, #156]	; (8002d1c <TIM_OC1_SetConfig+0x100>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <TIM_OC1_SetConfig+0x78>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <TIM_OC1_SetConfig+0x104>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d003      	beq.n	8002c94 <TIM_OC1_SetConfig+0x78>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a25      	ldr	r2, [pc, #148]	; (8002d24 <TIM_OC1_SetConfig+0x108>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10c      	bne.n	8002cae <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f023 0308 	bic.w	r3, r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <TIM_OC1_SetConfig+0xfc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00b      	beq.n	8002cce <TIM_OC1_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <TIM_OC1_SetConfig+0x100>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_OC1_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <TIM_OC1_SetConfig+0x104>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_OC1_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <TIM_OC1_SetConfig+0x108>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d111      	bne.n	8002cf2 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	621a      	str	r2, [r3, #32]
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40014000 	.word	0x40014000
 8002d20:	40014400 	.word	0x40014400
 8002d24:	40014800 	.word	0x40014800

08002d28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f023 0210 	bic.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	021b      	lsls	r3, r3, #8
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f023 0320 	bic.w	r3, r3, #32
 8002d76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <TIM_OC2_SetConfig+0xf0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d10d      	bne.n	8002da8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a1b      	ldr	r2, [pc, #108]	; (8002e18 <TIM_OC2_SetConfig+0xf0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00b      	beq.n	8002dc8 <TIM_OC2_SetConfig+0xa0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <TIM_OC2_SetConfig+0xf4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d007      	beq.n	8002dc8 <TIM_OC2_SetConfig+0xa0>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <TIM_OC2_SetConfig+0xf8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_OC2_SetConfig+0xa0>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <TIM_OC2_SetConfig+0xfc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d113      	bne.n	8002df0 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dd6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	621a      	str	r2, [r3, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40012c00 	.word	0x40012c00
 8002e1c:	40014000 	.word	0x40014000
 8002e20:	40014400 	.word	0x40014400
 8002e24:	40014800 	.word	0x40014800

08002e28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <TIM_OC3_SetConfig+0xec>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10d      	bne.n	8002ea6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ea4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1a      	ldr	r2, [pc, #104]	; (8002f14 <TIM_OC3_SetConfig+0xec>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <TIM_OC3_SetConfig+0x9e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <TIM_OC3_SetConfig+0xf0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d007      	beq.n	8002ec6 <TIM_OC3_SetConfig+0x9e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <TIM_OC3_SetConfig+0xf4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <TIM_OC3_SetConfig+0x9e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <TIM_OC3_SetConfig+0xf8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d113      	bne.n	8002eee <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	621a      	str	r2, [r3, #32]
}
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800

08002f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	031b      	lsls	r3, r3, #12
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <TIM_OC4_SetConfig+0xb8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00b      	beq.n	8002fa0 <TIM_OC4_SetConfig+0x7c>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a15      	ldr	r2, [pc, #84]	; (8002fe0 <TIM_OC4_SetConfig+0xbc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d007      	beq.n	8002fa0 <TIM_OC4_SetConfig+0x7c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <TIM_OC4_SetConfig+0xc0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d003      	beq.n	8002fa0 <TIM_OC4_SetConfig+0x7c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <TIM_OC4_SetConfig+0xc4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d109      	bne.n	8002fb4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	019b      	lsls	r3, r3, #6
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	621a      	str	r2, [r3, #32]
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40014000 	.word	0x40014000
 8002fe4:	40014400 	.word	0x40014400
 8002fe8:	40014800 	.word	0x40014800

08002fec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b087      	sub	sp, #28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003030:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	041b      	lsls	r3, r3, #16
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a15      	ldr	r2, [pc, #84]	; (8003098 <TIM_OC5_SetConfig+0xac>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00b      	beq.n	800305e <TIM_OC5_SetConfig+0x72>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <TIM_OC5_SetConfig+0xb0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <TIM_OC5_SetConfig+0x72>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <TIM_OC5_SetConfig+0xb4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d003      	beq.n	800305e <TIM_OC5_SetConfig+0x72>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <TIM_OC5_SetConfig+0xb8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d109      	bne.n	8003072 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	621a      	str	r2, [r3, #32]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800

080030a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	051b      	lsls	r3, r3, #20
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a16      	ldr	r2, [pc, #88]	; (8003158 <TIM_OC6_SetConfig+0xb0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d00b      	beq.n	800311c <TIM_OC6_SetConfig+0x74>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a15      	ldr	r2, [pc, #84]	; (800315c <TIM_OC6_SetConfig+0xb4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d007      	beq.n	800311c <TIM_OC6_SetConfig+0x74>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a14      	ldr	r2, [pc, #80]	; (8003160 <TIM_OC6_SetConfig+0xb8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d003      	beq.n	800311c <TIM_OC6_SetConfig+0x74>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a13      	ldr	r2, [pc, #76]	; (8003164 <TIM_OC6_SetConfig+0xbc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d109      	bne.n	8003130 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003122:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	621a      	str	r2, [r3, #32]
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40012c00 	.word	0x40012c00
 800315c:	40014000 	.word	0x40014000
 8003160:	40014400 	.word	0x40014400
 8003164:	40014800 	.word	0x40014800

08003168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	2201      	movs	r2, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	43db      	mvns	r3, r3
 800318a:	401a      	ands	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a1a      	ldr	r2, [r3, #32]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
}
 80031a6:	bf00      	nop
 80031a8:	371c      	adds	r7, #28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e054      	b.n	8003276 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a24      	ldr	r2, [pc, #144]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003234:	d009      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10c      	bne.n	8003264 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4313      	orrs	r3, r2
 800325a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	40012c00 	.word	0x40012c00
 8003288:	40000400 	.word	0x40000400
 800328c:	40014000 	.word	0x40014000

08003290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032a8:	2302      	movs	r3, #2
 80032aa:	e060      	b.n	800336e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a14      	ldr	r2, [pc, #80]	; (800337c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d115      	bne.n	800335c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	051b      	lsls	r3, r3, #20
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40012c00 	.word	0x40012c00

08003380 <memset>:
 8003380:	4402      	add	r2, r0
 8003382:	4603      	mov	r3, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <__libc_init_array>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	4d0d      	ldr	r5, [pc, #52]	; (80033c8 <__libc_init_array+0x38>)
 8003394:	4c0d      	ldr	r4, [pc, #52]	; (80033cc <__libc_init_array+0x3c>)
 8003396:	1b64      	subs	r4, r4, r5
 8003398:	10a4      	asrs	r4, r4, #2
 800339a:	2600      	movs	r6, #0
 800339c:	42a6      	cmp	r6, r4
 800339e:	d109      	bne.n	80033b4 <__libc_init_array+0x24>
 80033a0:	4d0b      	ldr	r5, [pc, #44]	; (80033d0 <__libc_init_array+0x40>)
 80033a2:	4c0c      	ldr	r4, [pc, #48]	; (80033d4 <__libc_init_array+0x44>)
 80033a4:	f000 f818 	bl	80033d8 <_init>
 80033a8:	1b64      	subs	r4, r4, r5
 80033aa:	10a4      	asrs	r4, r4, #2
 80033ac:	2600      	movs	r6, #0
 80033ae:	42a6      	cmp	r6, r4
 80033b0:	d105      	bne.n	80033be <__libc_init_array+0x2e>
 80033b2:	bd70      	pop	{r4, r5, r6, pc}
 80033b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033b8:	4798      	blx	r3
 80033ba:	3601      	adds	r6, #1
 80033bc:	e7ee      	b.n	800339c <__libc_init_array+0xc>
 80033be:	f855 3b04 	ldr.w	r3, [r5], #4
 80033c2:	4798      	blx	r3
 80033c4:	3601      	adds	r6, #1
 80033c6:	e7f2      	b.n	80033ae <__libc_init_array+0x1e>
 80033c8:	08003420 	.word	0x08003420
 80033cc:	08003420 	.word	0x08003420
 80033d0:	08003420 	.word	0x08003420
 80033d4:	08003424 	.word	0x08003424

080033d8 <_init>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr

080033e4 <_fini>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	bf00      	nop
 80033e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ea:	bc08      	pop	{r3}
 80033ec:	469e      	mov	lr, r3
 80033ee:	4770      	bx	lr
